angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD",LOCAL_STORAGE_KEY:"spicyTasteUser",LATEST_COUNT:10}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,n){var t=e.extendPalette("deep-orange",{500:"f27242"}),i=e.extendPalette("blue",{500:"6984b4",600:"6984b4"});e.definePalette("primaryOrange",t),e.definePalette("primaryBlue",i),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),e.theme("blue").primaryPalette("primaryBlue"),n.icon("menu","assets/svg/ic_menu_24px.svg").icon("share","assets/svg/ic_share_24px.svg").icon("login","assets/svg/ic_account_circle_24px.svg").icon("recipes","assets/svg/ic_event_note_48px.svg").icon("restaurants","assets/svg/ic_restaurant_menu_48px.svg").icon("ingredients","assets/svg/ic_receipt_48px.svg").icon("arrow","assets/svg/ic_arrow_drop_up_48px.svg").icon("more","assets/svg/ic_more_24px.svg").icon("time1","assets/svg/ic_av_timer_24px.svg").icon("time2","assets/svg/ic_access_time_24px.svg").icon("difficulty","assets/svg/ic_track_changes_24px.svg").icon("exit","assets/svg/ic_exit_to_app_48px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,i){e.user=null,n.fbAsyncInit=function(){FB.init({appId:i.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var i,o=e.getElementsByTagName(n)[0];e.getElementById(t)||(i=e.createElement(n),i.id=t,i.src="//connect.facebook.net/en_US/sdk.js",o.parentNode.insertBefore(i,o))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"detail"}).when("/admin/dishes/list",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/admin/dishes/create",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"})}]),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,n,t){var i=this;i.processing=!0,e.all().success(function(e){i.processing=!1,i.dishes=e}),i.deleteDish=function(n){i.processing=!0,e["delete"](n).success(function(n){e.all().success(function(e){i.processing=!1,i.dishes=e})})},i.addDish=function(){i.processing=!0,e.create({name:"new dish"}).success(function(e){t.path("/admin/dish/"+e.dish._id)})},i.fbShare=function(e){var i=t.absUrl()+"/"+e._id;n.fbShare(i)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","DishService","UserService",function(e,n,t,i,o,s){function r(){e.focusOnComment=!1,a.newComment={content:"",replyTo:null},a.commentTitle="Comment"}var a=this;a.dish={},r(),o.get(i.dish_id).success(function(e){a.dish=e,a.dish.isCollected=t.user&&t.user.favouriteDishes.indexOf(a.dish._id)>=0?!0:!1}),a.addComment=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}o.addComment(a.dish._id,a.newComment).success(function(e){a.dish.comments.push(e)}),r()},a.reply=function(n){a.newComment.replyTo=n._id,a.commentTitle="@"+n.userName,e.focusOnComment=!0},a.collect=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}s.collect(a.dish._id).then(function(e){console.log("UserService.collect:",e),e.success&&(a.dish.isCollected=!0)})}}]).controller("DishCreateController",["$location","DishService",function(e,n){var t=this;t.dish={name:"new dish"},t.save=function(){t.processing=!0,n.create(t.dish).success(function(n){e.path("/admin/dish/"+n.dish._id)})}}]).controller("DishEditController",["$routeParams","DishService","$location",function(e,n,t){function i(){o.newPhoto="",o.newInstruction="",o.message="",o.processing=!1}var o=this;i(),n.get(e.dish_id).success(function(e){o.dish=e}),o.addInstruction=function(){o.dish.instructions.push(o.newInstruction),o.newInstruction=""},o.removeInstruction=function(e){o.dish.instructions.splice(e,1)},o.addPhoto=function(){console.log("newPhoto: ",o.newPhoto),o.dish.photos.push(o.newPhoto),console.log("dish:",o.dish),o.newPhoto=""},o.removePhoto=function(e){o.dish.photos.splice(e,1)},o.save=function(){o.processing=!0,n.update(e.dish_id,o.dish).success(function(e){i(),o.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",["DishService","CONSTANTS",function(e,n){function t(){o.recipeTiles=[],i()}function i(){e.limit(n.LATEST_COUNT).success(function(e){angular.forEach(e,function(e,n){var t={image:e.imageUrl,title:e.name,id:e._id,prepTime:e.prepTime,totalTime:e.totalTime,difficulty:e.difficulty,ingredients:e.ingredients,span:{row:1,col:1}};switch(n+1){case 1:t.span.row=t.span.col=2;break;case 2:case 3:break;case 4:t.span.col=2;case 5:case 6:break;case 7:t.span.row=t.span.col=2;case 8:case 9:break;case 10:t.span.col=2}o.recipeTiles.push(t)})})}var o=this;t()}]),angular.module("spicyTaste").controller("MainController",["$rootScope","$location","$mdDialog","$http","SessionService","UserService","CONSTANTS",function(e,n,t,i,o,s,r){function a(e){var n=i.defaults.headers.common["X-Auth"];o.setLocal(r.LOCAL_STORAGE_KEY,n),t.hide(e)}function c(){l.showMobileMenu=!1,l.email="",l.password="",l.userName="";var n=o.getLocal(r.LOCAL_STORAGE_KEY);n&&(i.defaults.headers.common["X-Auth"]=n,s.get().then(function(n){e.currentUser=n}))}var l=this;c(),l.toggleMobileMenu=function(){l.showMobileMenu=!l.showMobileMenu},l.showLoginDialog=function(n){t.show({clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/login.html",targetEvent:n,controller:"MainController",controllerAs:"main"}).then(function(n){e.currentUser=n})},l.fbLogin=function(){FB.login(function(e){"connected"===e.status?FB.api("/me",function(e){var n={userName:e.name,email:e.email,password:r.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+e.id+"/picture?type=large",linkedSocial:r.FACEBOOK};s.socialLogin(n).then(function(e){e.loginType=r.FACEBOOK,a(e)})}):"not_authorized"===e.status},{scope:"public_profile,email"})},l.login=function(){s.login(l.email,l.password).then(function(e){e.loginType=r.EMAIL,a(e)})},l.signUp=function(){var e={userName:l.userName,email:l.email,password:l.password,photoUrl:"http://www.gravatar.com/avatar/"+md5.createHash(l.email),linkedSocial:r.EMAIL};s.create(e).then(function(e){e.loginType=r.EMAIL,a(e)})}}]),angular.module("spicyTaste").controller("ProfileController",["$location","$rootScope","UserService",function(e,n,t){function i(){o.user={},t.get().then(function(e){o.user=e})}var o=this;i(),o.logout=function(){t.logout(),n.currentUser=null,e.path("/")}}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,n,t,i){i.$render=function(){n.html(i.$viewValue||"")},n.bind("blur",function(){e.$apply(function(){i.$setViewValue(n.html())})})}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,n){e.$watch("focusValue",function(e,t){e&&!t&&n[0].focus()})}}}),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.limit=function(n){return e.get("/api/dishes?limit="+n)},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n.addComment=function(n,t){return e.post("/api/dishes/"+n+"/comments",t)},n.getDifficulties=function(){return["初学","容易","一般","较难","专业"]},n}]),angular.module("spicyTaste").factory("SessionService",["$window",function(e){var n={};return n.getLocal=function(n){if(e.localStorage){var t=e.localStorage.getItem(n);return angular.fromJson(t)}return!1},n.setLocal=function(n,t){return e.localStorage&&e.localStorage.setItem(n,angular.toJson(t))},n}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","$window","CONSTANTS",function(e,n,t,i){var o={};return o.socialLogin=function(e){return console.log("socialUser: ",e),o.searchBy("email="+e.email).then(function(n){if(n.success){var t=n.users[0];return t.linkedSocial.indexOf(e.linkedSocial)<0?(t.linkedSocial.push(e.linkedSocial),t.userName=e.userName,t.photoUrl=e.photoUrl,o.update(t).then(function(){return o.login(t.email,i.SOCIAL_PASS)})):o.login(t.email,i.SOCIAL_PASS)}return o.create(e)})},o.login=function(n,t){return e.post("/api/auth",{email:n,password:t}).then(function(n){return e.defaults.headers.common["X-Auth"]=n.data,o.get()})},o.logout=function(){delete e.defaults.headers.common["X-Auth"],t.localStorage.removeItem(i.LOCAL_STORAGE_KEY)},o.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},o.searchBy=function(n){return e.get("/api/users?"+n).then(function(e){return e.data})},o.getById=function(n){return e.get("/api/users/"+n).then(function(e){return e.data})},o.create=function(n){return e.post("/api/users/",n).then(function(){return o.login(n.email,n.password)})},o.update=function(n,t){return e.put("/api/users/"+n,t).then(function(e){return e.data})},o.collect=function(t){return e.put("/api/users/"+n.user._id+"/dishes/"+t).then(function(e){return e.data})},o}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRlc2lnbi5qcyIsImZhY2Vib29rLmpzIiwicm91dGVzLmpzIiwiY29udHJvbGxlcnMvZGlzaENvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9ob21lQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL21haW5Db250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvcHJvZmlsZUNvbnRyb2xsZXIuanMiLCJkaXJlY3RpdmVzL2NvbnRlbnRlZGl0YWJsZURpcmVjdGl2ZS5qcyIsImRpcmVjdGl2ZXMvZm9jdXNPbkRpcmVjdGl2ZS5qcyIsInNlcnZpY2VzL2Rpc2hTZXJ2aWNlLmpzIiwic2VydmljZXMvc2Vzc2lvblNlcnZpY2UuanMiLCJzZXJ2aWNlcy9zb2NpYWxTZXJ2aWNlLmpzIiwic2VydmljZXMvdXNlclNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiRkJfQVBQX0lEIiwiRkFDRUJPT0siLCJFTUFJTCIsIlNPQ0lBTF9QQVNTIiwiTE9DQUxfU1RPUkFHRV9LRVkiLCJMQVRFU1RfQ09VTlQiLCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCIkbWRJY29uUHJvdmlkZXIiLCJwcmltYXJ5T3JhbmdlIiwiZXh0ZW5kUGFsZXR0ZSIsIjUwMCIsInByaW1hcnlCbHVlIiwiNjAwIiwiZGVmaW5lUGFsZXR0ZSIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiaWNvbiIsInJ1biIsIiRyb290U2NvcGUiLCIkd2luZG93IiwiVXNlclNlcnZpY2UiLCJDT05TVEFOVFMiLCJ1c2VyIiwiZmJBc3luY0luaXQiLCJGQiIsImluaXQiLCJhcHBJZCIsImNvb2tpZSIsInhmYm1sIiwidmVyc2lvbiIsImQiLCJzIiwiaWQiLCJqcyIsImZqcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImRvY3VtZW50IiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkcm91dGVQcm92aWRlciIsImh0bWw1TW9kZSIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJEaXNoU2VydmljZSIsIlNvY2lhbFNlcnZpY2UiLCIkbG9jYXRpb24iLCJ2bSIsInRoaXMiLCJwcm9jZXNzaW5nIiwiYWxsIiwic3VjY2VzcyIsImRhdGEiLCJkaXNoZXMiLCJkZWxldGVEaXNoIiwiYWRkRGlzaCIsImNyZWF0ZSIsIm5hbWUiLCJwYXRoIiwiZGlzaCIsIl9pZCIsImZiU2hhcmUiLCJkaXNoTGluayIsImFic1VybCIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsImZvY3VzT25Db21tZW50IiwibmV3Q29tbWVudCIsImNvbnRlbnQiLCJyZXBseVRvIiwiY29tbWVudFRpdGxlIiwiZ2V0IiwiZGlzaF9pZCIsImlzQ29sbGVjdGVkIiwiZmF2b3VyaXRlRGlzaGVzIiwiaW5kZXhPZiIsImFkZENvbW1lbnQiLCJyZXR1cm5VcmwiLCJ1cmwiLCJzZWFyY2giLCJjb21tZW50IiwiY29tbWVudHMiLCJwdXNoIiwicmVwbHkiLCJ1c2VyTmFtZSIsImNvbGxlY3QiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsInNhdmUiLCJuZXdQaG90byIsIm5ld0luc3RydWN0aW9uIiwibWVzc2FnZSIsImFkZEluc3RydWN0aW9uIiwiaW5zdHJ1Y3Rpb25zIiwicmVtb3ZlSW5zdHJ1Y3Rpb24iLCJpbmRleCIsInNwbGljZSIsImFkZFBob3RvIiwicGhvdG9zIiwicmVtb3ZlUGhvdG8iLCJ1cGRhdGUiLCJyZWNpcGVUaWxlcyIsImJ1aWxkR3JpZCIsImxpbWl0IiwiZm9yRWFjaCIsInRpbGUiLCJpbWFnZSIsImltYWdlVXJsIiwidGl0bGUiLCJwcmVwVGltZSIsInRvdGFsVGltZSIsImRpZmZpY3VsdHkiLCJpbmdyZWRpZW50cyIsInNwYW4iLCJyb3ciLCJjb2wiLCIkbWREaWFsb2ciLCIkaHR0cCIsIlNlc3Npb25TZXJ2aWNlIiwiYWZ0ZXJBdXRoIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJzZXRMb2NhbCIsImhpZGUiLCJzaG93TW9iaWxlTWVudSIsImVtYWlsIiwicGFzc3dvcmQiLCJsb2dpbmVkVG9rZW4iLCJnZXRMb2NhbCIsImN1cnJlbnRVc2VyIiwidG9nZ2xlTW9iaWxlTWVudSIsInNob3dMb2dpbkRpYWxvZyIsImV2Iiwic2hvdyIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJ0YXJnZXRFdmVudCIsImZiTG9naW4iLCJsb2dpbiIsInJlc3BvbnNlIiwic3RhdHVzIiwiYXBpIiwiZmJVc2VyIiwicGhvdG9VcmwiLCJsaW5rZWRTb2NpYWwiLCJzb2NpYWxMb2dpbiIsImxvZ2luVHlwZSIsInNjb3BlIiwic2lnblVwIiwibmV3VXNlciIsIm1kNSIsImNyZWF0ZUhhc2giLCJsb2dvdXQiLCJkaXJlY3RpdmUiLCJyZXF1aXJlIiwicmVzdHJpY3QiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJpYnV0cyIsIm5nTW9kZWwiLCIkcmVuZGVyIiwiaHRtbCIsIiR2aWV3VmFsdWUiLCJiaW5kIiwiJGFwcGx5IiwiJHNldFZpZXdWYWx1ZSIsImZvY3VzVmFsdWUiLCIkZWxlbWVudCIsIiR3YXRjaCIsImN1cnJlbnRWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJmb2N1cyIsImZhY3RvcnkiLCJkaXNoRmFjdG9yeSIsIm51bSIsInBvc3QiLCJwdXQiLCJnZXREaWZmaWN1bHRpZXMiLCJzZXNzaW9uRmFjdG9yeSIsImtleSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJmcm9tSnNvbiIsInNldEl0ZW0iLCJ0b0pzb24iLCJzb2NpYWxGYWN0b3J5IiwidWkiLCJtZXRob2QiLCJocmVmIiwidXNlckZhY3RvcnkiLCJzb2NpYWxVc2VyIiwic2VhcmNoQnkiLCJ1c2VycyIsInJlbW92ZUl0ZW0iLCJxdWVyeSIsImdldEJ5SWQiLCJ1c2VyX2lkIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFB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QUF4SCxJQUFBLFdBQ0EsTUFBQStDLEdBQUEvQyxJQUFBLGlCQUFBZSxLQUFBLFNBQUF1RCxHQUNBLE1BQUFBLEdBQUF6RixRQUtBMkksRUFBQUUsU0FBQSxTQUFBRyxHQUNBLE1BQUE5RSxHQUFBL0MsSUFBQSxjQUFBNkgsR0FBQTlHLEtBQUEsU0FBQXVELEdBQ0EsTUFBQUEsR0FBQXpGLFFBS0EySSxFQUFBTSxRQUFBLFNBQUFDLEdBQ0EsTUFBQWhGLEdBQUEvQyxJQUFBLGNBQUErSCxHQUFBaEgsS0FBQSxTQUFBdUQsR0FDQSxNQUFBQSxHQUFBekYsUUFLQTJJLEVBQUF2SSxPQUFBLFNBQUF2QyxHQUNBLE1BQUFxRyxHQUFBMkQsS0FBQSxjQUFBaEssR0FBQXFFLEtBQUEsV0FDQSxNQUFBeUcsR0FBQW5ELE1BQUEzSCxFQUFBK0csTUFBQS9HLEVBQUFnSCxhQUtBOEQsRUFBQTFGLE9BQUEsU0FBQWlHLEVBQUFyTCxHQUNBLE1BQUFxRyxHQUFBNEQsSUFBQSxjQUFBb0IsRUFBQXJMLEdBQUFxRSxLQUFBLFNBQUF1RCxHQUNBLE1BQUFBLEdBQUF6RixRQUtBMkksRUFBQTFHLFFBQUEsU0FBQWIsR0FDQSxNQUFBOEMsR0FBQTRELElBQUEsY0FBQXJLLEVBQUFJLEtBQUEyQyxJQUFBLFdBQUFZLEdBQUFjLEtBQUEsU0FBQXVELEdBQ0EsTUFBQUEsR0FBQXpGLFFBSUEySSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScsIFsnbmdSb3V0ZScsICdhbmd1bGFyLW1kNScsICduZ01hdGVyaWFsJywgJ25nQW5pbWF0ZScsICduZ01lc3NhZ2VzJ10pXG4gICAgLmNvbnN0YW50KCdDT05TVEFOVFMnLCB7XG4gICAgICAgIFwiRkJfQVBQX0lEXCI6IDE1NjM1NjczODcyNTM0NjgsXG4gICAgICAgIFwiRkFDRUJPT0tcIjogXCJGQlwiLFxuICAgICAgICBcIkVNQUlMXCI6IFwiRU1BSUxcIixcbiAgICAgICAgXCJTT0NJQUxfUEFTU1wiOiBcIlBBU1NXT1JEXCIsXG4gICAgICAgIFwiTE9DQUxfU1RPUkFHRV9LRVlcIjogXCJzcGljeVRhc3RlVXNlclwiLFxuICAgICAgICBcIkxBVEVTVF9DT1VOVFwiOiAxMFxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJG1kVGhlbWluZ1Byb3ZpZGVyLCAkbWRJY29uUHJvdmlkZXIpIHtcblxuICAgICAgICB2YXIgcHJpbWFyeU9yYW5nZSA9ICRtZFRoZW1pbmdQcm92aWRlci5leHRlbmRQYWxldHRlKCdkZWVwLW9yYW5nZScsIHtcbiAgICAgICAgICAgICc1MDAnOiAnZjI3MjQyJ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcHJpbWFyeUJsdWUgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgnYmx1ZScsIHtcbiAgICAgICAgICAgICc1MDAnOiAnNjk4NGI0JyxcbiAgICAgICAgICAgICc2MDAnOiAnNjk4NGI0J1xuICAgICAgICB9KTtcblxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeU9yYW5nZScsIHByaW1hcnlPcmFuZ2UpO1xuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeUJsdWUnLCBwcmltYXJ5Qmx1ZSk7XG5cbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgncHJpbWFyeU9yYW5nZScpXG4gICAgICAgICAgICAuYWNjZW50UGFsZXR0ZSgnbGlnaHQtZ3JlZW4nKTtcblxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2JsdWUnKVxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdwcmltYXJ5Qmx1ZScpO1xuXG4gICAgICAgICRtZEljb25Qcm92aWRlci5pY29uKCdtZW51JywgJ2Fzc2V0cy9zdmcvaWNfbWVudV8yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignc2hhcmUnLCAnYXNzZXRzL3N2Zy9pY19zaGFyZV8yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignbG9naW4nLCAnYXNzZXRzL3N2Zy9pY19hY2NvdW50X2NpcmNsZV8yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbigncmVjaXBlcycsICdhc3NldHMvc3ZnL2ljX2V2ZW50X25vdGVfNDhweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3Jlc3RhdXJhbnRzJywgJ2Fzc2V0cy9zdmcvaWNfcmVzdGF1cmFudF9tZW51XzQ4cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdpbmdyZWRpZW50cycsICdhc3NldHMvc3ZnL2ljX3JlY2VpcHRfNDhweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2Fycm93JywgJ2Fzc2V0cy9zdmcvaWNfYXJyb3dfZHJvcF91cF80OHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignbW9yZScsICdhc3NldHMvc3ZnL2ljX21vcmVfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3RpbWUxJywgJ2Fzc2V0cy9zdmcvaWNfYXZfdGltZXJfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3RpbWUyJywgJ2Fzc2V0cy9zdmcvaWNfYWNjZXNzX3RpbWVfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2RpZmZpY3VsdHknLCAnYXNzZXRzL3N2Zy9pY190cmFja19jaGFuZ2VzXzI0cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdleGl0JywgJ2Fzc2V0cy9zdmcvaWNfZXhpdF90b19hcHBfNDhweC5zdmcnKTtcblxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHdpbmRvdywgVXNlclNlcnZpY2UsIENPTlNUQU5UUykge1xuICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBudWxsO1xuXG4gICAgICAgICR3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEZCLmluaXQoe1xuICAgICAgICAgICAgICAgIGFwcElkOiBDT05TVEFOVFMuRkJfQVBQX0lELFxuICAgICAgICAgICAgICAgIGNvb2tpZTogdHJ1ZSwgLy8gZW5hYmxlIGNvb2tpZXMgdG8gYWxsb3cgdGhlIHNlcnZlciB0byBhY2Nlc3MgdGhlIHNlc3Npb25cbiAgICAgICAgICAgICAgICB4ZmJtbDogdHJ1ZSwgLy8gcGFyc2Ugc29jaWFsIHBsdWdpbnMgb24gdGhpcyBwYWdlXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogJ3YyLjInIC8vIHVzZSB2ZXJzaW9uIDIuMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTG9hZCB0aGUgU0RLIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIChmdW5jdGlvbihkLCBzLCBpZCkge1xuICAgICAgICAgICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdO1xuICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47XG4gICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTtcbiAgICAgICAgICAgIGpzLmlkID0gaWQ7XG4gICAgICAgICAgICBqcy5zcmMgPSBcIi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvc2RrLmpzXCI7XG4gICAgICAgICAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7XG4gICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlciwgJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgIC8vaG9tZSBwYWdlXG4gICAgICAgICAgICAud2hlbignLycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL2hvbWUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdob21lJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vc2hvdyBhbGwgZGlzaGVzIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvZGlzaGVzJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvZGlzaC9hbGwuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hMaXN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaExpc3QnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy9zaG93IGRpc2ggZGV0YWlsIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvZGlzaGVzLzpkaXNoX2lkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvZGlzaC9kZXRhaWwuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hEZXRhaWxDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkZXRhaWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy9saXN0IGFkbWluIGRpc2ggcGFnZVxuICAgICAgICAgICAgLndoZW4oJy9hZG1pbi9kaXNoZXMvbGlzdCcsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL2FkbWluL2Rpc2gvbGlzdC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGlzaExpc3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkaXNoTGlzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2NyZWF0ZSBhIG5ldyBkaXNoIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvYWRtaW4vZGlzaGVzL2NyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL2FkbWluL2Rpc2gvc2luZ2xlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEaXNoQ3JlYXRlQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaE1hbmFnZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2VkaXQgYSBkaXNoIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvYWRtaW4vZGlzaGVzLzpkaXNoX2lkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvYWRtaW4vZGlzaC9zaW5nbGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hFZGl0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaE1hbmFnZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2xvZ2luIHVzZXJcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy91c2VyL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZ2luJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vdXNlciBwcm9maWxlXG4gICAgICAgICAgICAud2hlbignL21lJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvdXNlci9tZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUHJvZmlsZUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ21lJ1xuICAgICAgICAgICAgfSlcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAvL2NvbnRyb2xsZXIgYXBwbGllZCB0byBkaXNoIGxpc3QgcGFnZVxuICAgIC5jb250cm9sbGVyKCdEaXNoTGlzdENvbnRyb2xsZXInLCBmdW5jdGlvbihEaXNoU2VydmljZSwgU29jaWFsU2VydmljZSwgJGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy9zZXQgYSBwcm9jZXNzaW5nIHZhcmlhYmxlIHRvIHNob3cgbG9hZGluZ1xuICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgICAgICAvL2dyYWIgYWxsIHRoZSBkaXNoZXMgYXQgcGFnZSBsb2FkXG4gICAgICAgIERpc2hTZXJ2aWNlLmFsbCgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgLy93aGVuIGFsbCBkaXNoZXMgZmV0Y2hlZCwgcmVtb3ZlIHByb2Nlc3NpbmcgdmFyaWFibGVcbiAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy9iaW5kIHRoZSBkaXNoZXNcbiAgICAgICAgICAgIHZtLmRpc2hlcyA9IGRhdGE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vZnVuY3Rpb24gdG8gZGVsZXRlIGEgZGlzaFxuICAgICAgICB2bS5kZWxldGVEaXNoID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBEaXNoU2VydmljZS5kZWxldGUoaWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIERpc2hTZXJ2aWNlLmFsbCgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZtLmRpc2hlcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2bS5hZGREaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgRGlzaFNlcnZpY2UuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbmV3IGRpc2gnXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FkbWluL2Rpc2gvJyArIGRhdGEuZGlzaC5faWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5mYlNoYXJlID0gZnVuY3Rpb24oZGlzaCkge1xuICAgICAgICAgICAgdmFyIGRpc2hMaW5rID0gJGxvY2F0aW9uLmFic1VybCgpICsgJy8nICsgZGlzaC5faWQ7XG4gICAgICAgICAgICBTb2NpYWxTZXJ2aWNlLmZiU2hhcmUoZGlzaExpbmspO1xuICAgICAgICB9XG5cbiAgICB9KVxuICAgIC8vY29udHJvbGxlciBhcHBsaWVkIHRvIGRpc2ggZGV0YWlsIHBhZ2VcbiAgICAuY29udHJvbGxlcignRGlzaERldGFpbENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgJHJvb3RTY29wZSwgJHJvdXRlUGFyYW1zLCBEaXNoU2VydmljZSwgVXNlclNlcnZpY2UpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0uZGlzaCA9IHt9O1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgLy9nZXQgdGhlIGRpc2ggYnkgaWRcbiAgICAgICAgRGlzaFNlcnZpY2UuZ2V0KCRyb3V0ZVBhcmFtcy5kaXNoX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZtLmRpc2ggPSBkYXRhO1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUudXNlciAmJiAkcm9vdFNjb3BlLnVzZXIuZmF2b3VyaXRlRGlzaGVzLmluZGV4T2Yodm0uZGlzaC5faWQpID49IDApIHtcbiAgICAgICAgICAgICAgICB2bS5kaXNoLmlzQ29sbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdm0uZGlzaC5pc0NvbGxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZtLmFkZENvbW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS51c2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldHVyblVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpLnNlYXJjaCh7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblVybDogcmV0dXJuVXJsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLmFkZENvbW1lbnQodm0uZGlzaC5faWQsIHZtLm5ld0NvbW1lbnQpLnN1Y2Nlc3MoZnVuY3Rpb24oY29tbWVudCkge1xuICAgICAgICAgICAgICAgIHZtLmRpc2guY29tbWVudHMucHVzaChjb21tZW50KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpbml0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0ucmVwbHkgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICB2bS5uZXdDb21tZW50LnJlcGx5VG8gPSB1c2VyLl9pZDtcbiAgICAgICAgICAgIHZtLmNvbW1lbnRUaXRsZSA9ICdAJyArIHVzZXIudXNlck5hbWU7XG4gICAgICAgICAgICAkc2NvcGUuZm9jdXNPbkNvbW1lbnQgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZtLmNvbGxlY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS51c2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldHVyblVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpLnNlYXJjaCh7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblVybDogcmV0dXJuVXJsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNvbGxlY3Qodm0uZGlzaC5faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXNlclNlcnZpY2UuY29sbGVjdDpcIiwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLmRpc2guaXNDb2xsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgICRzY29wZS5mb2N1c09uQ29tbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgdm0ubmV3Q29tbWVudCA9IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgICAgICByZXBseVRvOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZtLmNvbW1lbnRUaXRsZSA9ICdDb21tZW50JztcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy9jb250cm9sbGVyIGFwcGxpZWQgdG8gZGlzaCBjcmVhdGlvbiBwYWdlXG4gICAgLy9ub3QgdXNlIGFueW1vcmVcbiAgICAuY29udHJvbGxlcignRGlzaENyZWF0ZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkbG9jYXRpb24sIERpc2hTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0uZGlzaCA9IHtcbiAgICAgICAgICAgIG5hbWU6ICduZXcgZGlzaCdcbiAgICAgICAgfTtcblxuICAgICAgICB2bS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgRGlzaFNlcnZpY2UuY3JlYXRlKHZtLmRpc2gpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYWRtaW4vZGlzaC8nICsgZGF0YS5kaXNoLl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHZtLnR5cGUgPSAnY3JlYXRlJztcbiAgICAgICAgICAgIHZtLmRpc2ggPSB7XG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBwaG90bzogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2bS5uZXdJbnN0cnVjdGlvbiA9ICcnO1xuICAgICAgICAgICAgdm0ubmV3UGhvdG8gPSAnJztcbiAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHZtLmRpc2guaW5zdHJ1Y3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB2bS5kaXNoLnBob3Rvcy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAvL2NvbnRyb2xsZXIgYXBwbGllZCB0byBkaXNoIGVkaXQgcGFnZVxuICAgIC5jb250cm9sbGVyKCdEaXNoRWRpdENvbnRyb2xsZXInLCBmdW5jdGlvbigkcm91dGVQYXJhbXMsIERpc2hTZXJ2aWNlLCAkbG9jYXRpb24pIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgaW5pdCgpO1xuXG4gICAgICAgIC8vZ2V0IHRoZSBkaXNoIGJ5IGlkXG4gICAgICAgIERpc2hTZXJ2aWNlLmdldCgkcm91dGVQYXJhbXMuZGlzaF9pZCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2bS5kaXNoID0gZGF0YTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdm0uYWRkSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZtLmRpc2guaW5zdHJ1Y3Rpb25zLnB1c2godm0ubmV3SW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgdm0ubmV3SW5zdHJ1Y3Rpb24gPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnJlbW92ZUluc3RydWN0aW9uID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZtLmRpc2guaW5zdHJ1Y3Rpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5hZGRQaG90byA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJuZXdQaG90bzogXCIsIHZtLm5ld1Bob3RvKTtcbiAgICAgICAgICAgIHZtLmRpc2gucGhvdG9zLnB1c2godm0ubmV3UGhvdG8pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJkaXNoOlwiLCB2bS5kaXNoKTtcbiAgICAgICAgICAgIHZtLm5ld1Bob3RvID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5yZW1vdmVQaG90byA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2bS5kaXNoLnBob3Rvcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0uc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdm0ucHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLnVwZGF0ZSgkcm91dGVQYXJhbXMuZGlzaF9pZCwgdm0uZGlzaCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHZtLm5ld1Bob3RvID0gJyc7XG4gICAgICAgICAgICB2bS5uZXdJbnN0cnVjdGlvbiA9ICcnO1xuICAgICAgICAgICAgdm0ubWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgdm0ucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oRGlzaFNlcnZpY2UsIENPTlNUQU5UUykge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHZtLnJlY2lwZVRpbGVzID0gW107XG4gICAgICAgICAgICBidWlsZEdyaWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkR3JpZCgpIHtcbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLmxpbWl0KENPTlNUQU5UUy5MQVRFU1RfQ09VTlQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGlzaGVzKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRpc2hlcywgZnVuY3Rpb24oZGlzaCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogZGlzaC5pbWFnZVVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkaXNoLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZGlzaC5faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVwVGltZTogZGlzaC5wcmVwVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsVGltZTogZGlzaC50b3RhbFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmaWN1bHR5OiBkaXNoLmRpZmZpY3VsdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmdyZWRpZW50czogZGlzaC5pbmdyZWRpZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbmRleCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlLnNwYW4ucm93ID0gdGlsZS5zcGFuLmNvbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS5zcGFuLmNvbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS5zcGFuLnJvdyA9IHRpbGUuc3Bhbi5jb2wgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlLnNwYW4uY29sID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZtLnJlY2lwZVRpbGVzLnB1c2godGlsZSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkbG9jYXRpb24sICRtZERpYWxvZywgJGh0dHAsIFNlc3Npb25TZXJ2aWNlLCBVc2VyU2VydmljZSwgQ09OU1RBTlRTKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIGluaXQoKTtcblxuICAgICAgICB2bS50b2dnbGVNb2JpbGVNZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5zaG93TW9iaWxlTWVudSA9ICF2bS5zaG93TW9iaWxlTWVudTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnNob3dMb2dpbkRpYWxvZyA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL2RpYWxvZ3MvbG9naW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYWluQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbWFpbidcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0uZmJMb2dpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgRkIubG9naW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBMb2dnZWQgaW50byB5b3VyIGFwcCBhbmQgRmFjZWJvb2suXG4gICAgICAgICAgICAgICAgICAgIEZCLmFwaSgnL21lJywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmYlVzZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IHJlc3BvbnNlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHJlc3BvbnNlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBDT05TVEFOVFMuU09DSUFMX1BBU1MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9Vcmw6ICdodHRwOi8vZ3JhcGguZmFjZWJvb2suY29tLycgKyByZXNwb25zZS5pZCArICcvcGljdHVyZT90eXBlPWxhcmdlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rZWRTb2NpYWw6IENPTlNUQU5UUy5GQUNFQk9PS1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2Uuc29jaWFsTG9naW4oZmJVc2VyKS50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmxvZ2luVHlwZSA9IENPTlNUQU5UUy5GQUNFQk9PSztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlckF1dGgodXNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnbm90X2F1dGhvcml6ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwZXJzb24gaXMgbG9nZ2VkIGludG8gRmFjZWJvb2ssIGJ1dCBub3QgeW91ciBhcHAuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHBlcnNvbiBpcyBub3QgbG9nZ2VkIGludG8gRmFjZWJvb2ssIHNvIHdlJ3JlIG5vdCBzdXJlIGlmXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXkgYXJlIGxvZ2dlZCBpbnRvIHRoaXMgYXBwIG9yIG5vdC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICdwdWJsaWNfcHJvZmlsZSxlbWFpbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0ubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmxvZ2luKHZtLmVtYWlsLCB2bS5wYXNzd29yZCkudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgdXNlci5sb2dpblR5cGUgPSBDT05TVEFOVFMuRU1BSUw7XG4gICAgICAgICAgICAgICAgYWZ0ZXJBdXRoKHVzZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5zaWduVXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuZXdVc2VyID0ge1xuICAgICAgICAgICAgICAgIHVzZXJOYW1lOiB2bS51c2VyTmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbDogdm0uZW1haWwsXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHZtLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIHBob3RvVXJsOiAnaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLycgKyBtZDUuY3JlYXRlSGFzaCh2bS5lbWFpbCksXG4gICAgICAgICAgICAgICAgbGlua2VkU29jaWFsOiBDT05TVEFOVFMuRU1BSUxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNyZWF0ZShuZXdVc2VyKS50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICB1c2VyLmxvZ2luVHlwZSA9IENPTlNUQU5UUy5FTUFJTDtcbiAgICAgICAgICAgICAgICBhZnRlckF1dGgodXNlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWZ0ZXJBdXRoKHVzZXIpIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXTtcbiAgICAgICAgICAgIFNlc3Npb25TZXJ2aWNlLnNldExvY2FsKENPTlNUQU5UUy5MT0NBTF9TVE9SQUdFX0tFWSwgdG9rZW4pO1xuICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUodXNlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdm0uc2hvd01vYmlsZU1lbnUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZtLmVtYWlsID0gXCJcIjtcbiAgICAgICAgICAgIHZtLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgICAgIHZtLnVzZXJOYW1lID0gXCJcIjtcblxuICAgICAgICAgICAgdmFyIGxvZ2luZWRUb2tlbiA9IFNlc3Npb25TZXJ2aWNlLmdldExvY2FsKENPTlNUQU5UUy5MT0NBTF9TVE9SQUdFX0tFWSk7XG4gICAgICAgICAgICBpZiAobG9naW5lZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gbG9naW5lZFRva2VuO1xuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldCgpLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDb250cm9sbGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCBVc2VyU2VydmljZSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgdm0ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSBudWxsO1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdm0udXNlciA9IHt9O1xuICAgICAgICAgICAgVXNlclNlcnZpY2UuZ2V0KCkudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgdm0udXNlciA9IHVzZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0cywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmh0bWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5kaXJlY3RpdmUoJ2ZvY3VzT24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGZvY3VzVmFsdWU6IFwiPWZvY3VzT25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdmb2N1c1ZhbHVlJywgZnVuY3Rpb24oY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgJiYgIXByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuZmFjdG9yeSgnRGlzaFNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCkge1xuXG4gICAgICAgIC8vY3JlYXRlIGEgbmV3IG9iamVjdFxuICAgICAgICB2YXIgZGlzaEZhY3RvcnkgPSB7fTtcblxuICAgICAgICAvL2dldCBhbGwgZGlzaGVzXG4gICAgICAgIGRpc2hGYWN0b3J5LmFsbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9kaXNoZXMnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvL2dldCBsaW1pdGVkIGxhdGVzdCBkaXNoZXNcbiAgICAgICAgZGlzaEZhY3RvcnkubGltaXQgPSBmdW5jdGlvbihudW0pIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZGlzaGVzP2xpbWl0PScgKyBudW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jcmVhdGUgYSBkaXNoXG4gICAgICAgIGRpc2hGYWN0b3J5LmNyZWF0ZSA9IGZ1bmN0aW9uKGRpc2gpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Rpc2hlcycsIGRpc2gpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vZ2V0IGEgc2luZ2xlIGRpc2hcbiAgICAgICAgZGlzaEZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oZGlzaF9pZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9kaXNoZXMvJyArIGRpc2hfaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgYSBkaXNoXG4gICAgICAgIGRpc2hGYWN0b3J5LnVwZGF0ZSA9IGZ1bmN0aW9uKGRpc2hfaWQsIGRpc2gpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvZGlzaGVzLycgKyBkaXNoX2lkLCBkaXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZGVsZXRlIGEgZGlzaFxuICAgICAgICBkaXNoRmFjdG9yeS5kZWxldGUgPSBmdW5jdGlvbihkaXNoX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2FkZCBhIGNvbW1lbnRcbiAgICAgICAgZGlzaEZhY3RvcnkuYWRkQ29tbWVudCA9IGZ1bmN0aW9uKGRpc2hfaWQsIGNvbW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCArICcvY29tbWVudHMnLCBjb21tZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZ2V0IGRpZmZpY3VsdHlcbiAgICAgICAgZGlzaEZhY3RvcnkuZ2V0RGlmZmljdWx0aWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gWyfliJ3lraYnLCAn5a655piTJywgJ+S4gOiIrCcsICfovoPpmr4nLCAn5LiT5LiaJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpc2hGYWN0b3J5O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5mYWN0b3J5KCdTZXNzaW9uU2VydmljZScsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAgICAgdmFyIHNlc3Npb25GYWN0b3J5ID0ge307XG5cbiAgICAgICAgc2Vzc2lvbkZhY3RvcnkuZ2V0TG9jYWwgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGlmICgkd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZnJvbUpzb24oZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzZXNzaW9uRmFjdG9yeS5zZXRMb2NhbCA9IGZ1bmN0aW9uKGtleSwgZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICR3aW5kb3cubG9jYWxTdG9yYWdlICYmICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBhbmd1bGFyLnRvSnNvbihkYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2Vzc2lvbkZhY3Rvcnk7XG5cbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuZmFjdG9yeSgnU29jaWFsU2VydmljZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc29jaWFsRmFjdG9yeSA9IHt9O1xuXG4gICAgICAgIHNvY2lhbEZhY3RvcnkuZmJTaGFyZSA9IGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgICAgIEZCLnVpKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdzaGFyZScsXG4gICAgICAgICAgICAgICAgaHJlZjogbGluayxcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc29jaWFsRmFjdG9yeTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuZmFjdG9yeSgnVXNlclNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgJHJvb3RTY29wZSwgJHdpbmRvdywgQ09OU1RBTlRTKSB7XG4gICAgICAgIHZhciB1c2VyRmFjdG9yeSA9IHt9O1xuICAgICAgICAvL3NvY2lhbCBsb2dpblxuICAgICAgICB1c2VyRmFjdG9yeS5zb2NpYWxMb2dpbiA9IGZ1bmN0aW9uKHNvY2lhbFVzZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic29jaWFsVXNlcjogXCIsIHNvY2lhbFVzZXIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdXNlckZhY3Rvcnkuc2VhcmNoQnkoJ2VtYWlsPScgKyBzb2NpYWxVc2VyLmVtYWlsKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbm90IGZvdW5kLCB0aGVuIGNyZWF0ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkuY3JlYXRlKHNvY2lhbFVzZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZm91bmQgdGhlIHVzZXIgd2l0aCBlbWFpbFxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlua2VkIHNvY2lhbCBpZiBub3QgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSBkYXRhLnVzZXJzWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlci5saW5rZWRTb2NpYWwuaW5kZXhPZihzb2NpYWxVc2VyLmxpbmtlZFNvY2lhbCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmxpbmtlZFNvY2lhbC5wdXNoKHNvY2lhbFVzZXIubGlua2VkU29jaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIudXNlck5hbWUgPSBzb2NpYWxVc2VyLnVzZXJOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5waG90b1VybCA9IHNvY2lhbFVzZXIucGhvdG9Vcmw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS51cGRhdGUodXNlcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkubG9naW4odXNlci5lbWFpbCwgQ09OU1RBTlRTLlNPQ0lBTF9QQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LmxvZ2luKHVzZXIuZW1haWwsIENPTlNUQU5UUy5TT0NJQUxfUEFTUyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbG9naW4gdXNlclxuICAgICAgICB1c2VyRmFjdG9yeS5sb2dpbiA9IGZ1bmN0aW9uKGVtYWlsLCBwYXNzd29yZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9hdXRoJywge1xuICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5nZXQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICAvL2xvZ291dCB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXTtcbiAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oQ09OU1RBTlRTLkxPQ0FMX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZ2V0IGN1cnJlbnQgdXNlclxuICAgICAgICB1c2VyRmFjdG9yeS5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvbWUnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2VhcmNoIHVzZXIgYnkgZmllbGRcbiAgICAgICAgdXNlckZhY3Rvcnkuc2VhcmNoQnkgPSBmdW5jdGlvbihxdWVyeSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycz8nICsgcXVlcnkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgdXNlciBieSBpZFxuICAgICAgICB1c2VyRmFjdG9yeS5nZXRCeUlkID0gZnVuY3Rpb24odXNlcl9pZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdXNlcl9pZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NyZWF0ZSBhIG5ldyB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmNyZWF0ZSA9IGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzLycsIHVzZXIpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LmxvZ2luKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3VwZGF0ZSB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LnVwZGF0ZSA9IGZ1bmN0aW9uKHVzZXJfaWQsIHVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdXNlcnMvJyArIHVzZXJfaWQsIHVzZXIpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jb2xsZWN0IGRpc2ggYXMgZmF2b3VyaXRlXG4gICAgICAgIHVzZXJGYWN0b3J5LmNvbGxlY3QgPSBmdW5jdGlvbihkaXNoX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL3VzZXJzLycgKyAkcm9vdFNjb3BlLnVzZXIuX2lkICsgJy9kaXNoZXMvJyArIGRpc2hfaWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5O1xuICAgIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9