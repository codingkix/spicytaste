angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD",LOCAL_STORAGE_KEY:"spicyTasteUser",LATEST_COUNT:10}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,n){var t=e.extendPalette("deep-orange",{500:"f27242"}),o=e.extendPalette("blue",{500:"6984b4",600:"6984b4"});e.definePalette("primaryOrange",t),e.definePalette("primaryBlue",o),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),e.theme("blue").primaryPalette("primaryBlue"),n.icon("menu","svg/ic_menu_24px.svg").icon("share","svg/ic_share_48px.svg").icon("login","svg/ic_account_circle_24px.svg").icon("recipes","svg/ic_event_note_48px.svg").icon("restaurants","svg/ic_restaurant_menu_48px.svg").icon("ingredients","svg/ic_receipt_48px.svg").icon("arrow","svg/ic_arrow_drop_up_48px.svg").icon("more","svg/ic_more_24px.svg").icon("time1","svg/ic_av_timer_24px.svg").icon("time2","svg/ic_access_time_24px.svg").icon("difficulty","svg/ic_track_changes_24px.svg").icon("exit","svg/ic_exit_to_app_48px.svg").icon("photo","svg/ic_mms_24px.svg").icon("check","svg/ic_check_circle_24px.svg").icon("facebook","svg/facebook.svg").icon("twitter","svg/twitter.svg").icon("pinterest","svg/pinterest.svg").icon("comments","svg/ic_chat_48px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,o){e.user=null,n.fbAsyncInit=function(){FB.init({appId:o.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var o,i=e.getElementsByTagName(n)[0];e.getElementById(t)||(o=e.createElement(n),o.id=t,o.src="//connect.facebook.net/en_US/sdk.js",i.parentNode.insertBefore(o,i))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"dishDetail"}).when("/admin/dishes/list",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/admin/dishes/create",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"})}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,n,t,o){o.$render=function(){n.html(o.$viewValue||"")},n.bind("blur",function(){e.$apply(function(){o.$setViewValue(n.html())})})}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,n){e.$watch("focusValue",function(e,t){e&&!t&&n[0].focus()})}}}),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,n,t){var o=this;o.processing=!0,e.all().success(function(e){o.processing=!1,o.dishes=e}),o.deleteDish=function(n){o.processing=!0,e["delete"](n).success(function(n){e.all().success(function(e){o.processing=!1,o.dishes=e})})},o.addDish=function(){o.processing=!0,e.create({name:"new dish"}).success(function(e){t.path("/admin/dish/"+e.dish._id)})},o.fbShare=function(e){var o=t.absUrl()+"/"+e._id;n.fbShare(o)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","$mdDialog","DishService","UserService","SocialService",function(e,n,t,o,i,s,r,c){function a(){}function l(e,n,t){i.show({targetEvent:n,clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/comment.html",locals:{title:e},controller:u,controllerAs:"comment"}).then(function(e){s.addComment(d.dish._id,{content:e,replyTo:t}).success(function(e){d.dish.comments.push(e)})})}function u(e,n){var t=this;t.content="",t.title=e,t.closeDialog=function(){n.cancel()},t.submit=function(){""==t.content.trim()?n.cancel():n.hide(t.content)}}var d=this;d.dish={},a(),s.get(o.dish_id).success(function(e){d.dish=e,d.dish.isCollected=t.user&&t.user.favouriteDishes.indexOf(d.dish._id)>=0?!0:!1}),d.fbShare=function(e){var t=n.absUrl()+"/"+e._id;c.fbShare(t)},d.reply=function(e,n){var t="@"+e.userName;l(t,n,e._id)},d.collect=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}r.collect(d.dish._id).then(function(e){console.log("UserService.collect:",e),e.success&&(d.dish.isCollected=!0)})},d.showInstructionPhoto=function(e,n){null!=e&&""!=e.trim()&&i.show({targetEvent:n,clickOutsideToClose:!0,template:'<md-dialog>  <md-dialog-content><img src="{{photo}}"></md-dialog-content></md-dialog>',controller:["$scope",function(n){n.photo=e}]})},d.newComment=function(e){l("Comment",e,null)},u.$inject=["title","$mdDialog"]}]).controller("DishCreateController",["$location","DishService",function(e,n){var t=this;t.dish={name:"new dish"},t.save=function(){t.processing=!0,n.create(t.dish).success(function(n){e.path("/admin/dish/"+n.dish._id)})}}]).controller("DishEditController",["$routeParams","DishService","$location",function(e,n,t){function o(){i.newPhoto="",i.newInstruction="",i.message="",i.processing=!1}var i=this;o(),n.get(e.dish_id).success(function(e){i.dish=e}),i.addInstruction=function(){i.dish.instructions.push(i.newInstruction),i.newInstruction=""},i.removeInstruction=function(e){i.dish.instructions.splice(e,1)},i.addPhoto=function(){console.log("newPhoto: ",i.newPhoto),i.dish.photos.push(i.newPhoto),console.log("dish:",i.dish),i.newPhoto=""},i.removePhoto=function(e){i.dish.photos.splice(e,1)},i.save=function(){i.processing=!0,n.update(e.dish_id,i.dish).success(function(e){o(),i.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",["DishService","CONSTANTS",function(e,n){function t(){i.recipeTiles=[],o()}function o(){e.limit(n.LATEST_COUNT).success(function(e){angular.forEach(e,function(e,n){var t={image:e.imageUrl,title:e.name,id:e._id,prepTime:e.prepTime,totalTime:e.totalTime,difficulty:e.difficulty,tags:e.tags,span:{row:1,col:1}};switch(n+1){case 1:t.span.row=t.span.col=2;break;case 2:case 3:break;case 4:t.span.col=2;case 5:case 6:break;case 7:t.span.row=t.span.col=2;case 8:case 9:break;case 10:t.span.col=2}i.recipeTiles.push(t)})})}var i=this;t()}]),angular.module("spicyTaste").controller("MainController",["$rootScope","$location","$mdDialog","$http","SessionService","UserService","CONSTANTS",function(e,n,t,o,i,s,r){function c(e){var n=o.defaults.headers.common["X-Auth"];i.setLocal(r.LOCAL_STORAGE_KEY,n),t.hide(e)}function a(){l.showMobileMenu=!1,l.email="",l.password="",l.userName="";var n=i.getLocal(r.LOCAL_STORAGE_KEY);n&&(o.defaults.headers.common["X-Auth"]=n,s.get().then(function(n){e.currentUser=n}))}var l=this;a(),l.toggleMobileMenu=function(){l.showMobileMenu=!l.showMobileMenu},l.showLoginDialog=function(n){t.show({clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/login.html",targetEvent:n,controller:"MainController",controllerAs:"main"}).then(function(n){e.currentUser=n})},l.fbLogin=function(){FB.login(function(e){"connected"===e.status?FB.api("/me",function(e){var n={userName:e.name,email:e.email,password:r.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+e.id+"/picture?type=large",linkedSocial:r.FACEBOOK};s.socialLogin(n).then(function(e){e.loginType=r.FACEBOOK,c(e)})}):"not_authorized"===e.status},{scope:"public_profile,email"})},l.login=function(){s.login(l.email,l.password).then(function(e){e.loginType=r.EMAIL,c(e)})},l.signUp=function(){var e={userName:l.userName,email:l.email,password:l.password,photoUrl:"http://www.gravatar.com/avatar/"+md5.createHash(l.email),linkedSocial:r.EMAIL};s.create(e).then(function(e){e.loginType=r.EMAIL,c(e)})}}]),angular.module("spicyTaste").controller("ProfileController",["$location","$rootScope","UserService",function(e,n,t){function o(){i.user={},t.get().then(function(e){i.user=e})}var i=this;o(),i.logout=function(){t.logout(),n.currentUser=null,e.path("/")}}]),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.limit=function(n){return e.get("/api/dishes?limit="+n)},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n.addComment=function(n,t){return e.post("/api/dishes/"+n+"/comments",t)},n.getDifficulties=function(){return["初学","容易","一般","较难","专业"]},n}]),angular.module("spicyTaste").factory("SessionService",["$window",function(e){var n={};return n.getLocal=function(n){if(e.localStorage){var t=e.localStorage.getItem(n);return angular.fromJson(t)}return!1},n.setLocal=function(n,t){return e.localStorage&&e.localStorage.setItem(n,angular.toJson(t))},n}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","$window","CONSTANTS",function(e,n,t,o){var i={};return i.socialLogin=function(e){return console.log("socialUser: ",e),i.searchBy("email="+e.email).then(function(n){if(n.success){var t=n.users[0];return t.linkedSocial.indexOf(e.linkedSocial)<0?(t.linkedSocial.push(e.linkedSocial),t.userName=e.userName,t.photoUrl=e.photoUrl,i.update(t).then(function(){return i.login(t.email,o.SOCIAL_PASS)})):i.login(t.email,o.SOCIAL_PASS)}return i.create(e)})},i.login=function(n,t){return e.post("/api/auth",{email:n,password:t}).then(function(n){return e.defaults.headers.common["X-Auth"]=n.data,i.get()})},i.logout=function(){delete e.defaults.headers.common["X-Auth"],t.localStorage.removeItem(o.LOCAL_STORAGE_KEY)},i.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},i.searchBy=function(n){return e.get("/api/users?"+n).then(function(e){return e.data})},i.getById=function(n){return e.get("/api/users/"+n).then(function(e){return e.data})},i.create=function(n){return e.post("/api/users/",n).then(function(){return i.login(n.email,n.password)})},i.update=function(n,t){return e.put("/api/users/"+n,t).then(function(e){return e.data})},i.collect=function(t){return e.put("/api/users/"+n.user._id+"/dishes/"+t).then(function(e){return e.data})},i}]);
//# sourceMappingURL=data:application/json;base64,