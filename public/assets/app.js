angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"P@ssw0rd",LOCAL_STORAGE_KEY:"spicyTasteUser",LATEST_COUNT:10}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,t){"use strict";var n=e.extendPalette("deep-orange",{500:"f27242"}),i=e.extendPalette("blue",{500:"6984b4",600:"6984b4"});e.definePalette("primaryOrange",n),e.definePalette("primaryBlue",i),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),e.theme("blue").primaryPalette("primaryBlue"),t.icon("menu","svg/ic_menu_24px.svg").icon("share","svg/ic_share_48px.svg").icon("login","svg/ic_account_circle_24px.svg").icon("recipes","svg/ic_event_note_48px.svg").icon("restaurants","svg/ic_restaurant_menu_48px.svg").icon("ingredients","svg/ic_receipt_48px.svg").icon("arrow","svg/ic_arrow_drop_up_48px.svg").icon("more","svg/ic_more_24px.svg").icon("time1","svg/ic_av_timer_24px.svg").icon("time2","svg/ic_access_time_24px.svg").icon("difficulty","svg/ic_track_changes_24px.svg").icon("exit","svg/ic_exit_to_app_48px.svg").icon("photo","svg/ic_mms_24px.svg").icon("check","svg/ic_check_circle_24px.svg").icon("facebook","svg/facebook.svg").icon("twitter","svg/twitter.svg").icon("pinterest","svg/pinterest.svg").icon("comments","svg/ic_chat_48px.svg").icon("menu","svg/ic_menu_48px.svg").icon("favorite","svg/ic_favorite_24px.svg").icon("delete","svg/ic_delete_48px.svg").icon("add","svg/ic_add_circle_outline_48px.svg").icon("arrow-down","svg/ic_expand_more_48px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$location","$window","CONSTANTS","UserService",function(e,t,n,i,o){n.fbAsyncInit=function(){FB.init({appId:i.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,t,n){var i,o=e.getElementsByTagName(t)[0];e.getElementById(n)||(i=e.createElement(t),i.id=n,i.src="//connect.facebook.net/en_US/sdk.js",o.parentNode.insertBefore(i,o))}(document,"script","facebook-jssdk"),e.$on("$routeChangeStart",function(e,n){n.access&&o.authorize(n.access.requirePermissions).then(function(e){e||t.path("not-authorize").replace()})})}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,t){"use strict";e.html5Mode(!0),t.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/inspire",{templateUrl:"/ng/views/pages/shows/dinner.html",controller:"DinnerController",controllerAs:"dinner"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"dishDetail"}).when("/admin/dishes",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList",access:{requirePermissions:["Admin"]}}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage",access:{requirePermissions:["Admin"]}}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"}).when("/not-authorize",{templateUrl:"ng/views/pages/not-authorize.html"})}]),angular.module("spicyTaste").controller("DinnerController",["DishService",function(e){"use strict"}]),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,t,n){var i=this;e.all().success(function(e){i.dishes=e}),i.deleteDish=function(t){var n=i.dishes[t];e["delete"](n._id).success(function(e){i.dishes.splice(t,1)})},i.addDish=function(){e.create({name:"new dish"}).success(function(e){n.path("/admin/dishes/"+e.dish._id)})},i.goToEdit=function(e){n.path("/admin/dishes/"+e)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","$filter","$mdDialog","DishService","UserService","SocialService",function(e,t,n,i,o,s,r,c,a){function l(){h.dish={},h.relatedDishes={},r.get(i.dish_id).success(function(e){if(h.dish=e,h.dish.isCollected=!1,r.relate(h.dish._id,h.dish.tags,3).success(function(e){h.relatedDishes=e}),n.currentUser){var t=o("filter")(n.currentUser.favouriteDishes,{_id:h.dish._id},!0);t.length&&(h.dish.isCollected=!0)}})}function u(e,t,n){s.show({targetEvent:t,clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/comment.html",locals:{title:e},controller:d,controllerAs:"comment"}).then(function(e){r.addComment(h.dish._id,{content:e,replyTo:n}).success(function(e){h.dish.comments.push(e)})})}function d(e,t){var n=this;n.content="",n.title=e,n.closeDialog=function(){t.cancel()},n.submit=function(){""==n.content.trim()?t.cancel():t.hide(n.content)}}var h=this;h.dish={},l(),h.enterFlipBook=function(e){s.show({targetEvent:e,clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/flipbook.html",controller:"DishDetailController",controllerAs:"book"})["finally"](function(){n.shownBook=!1}),n.shownBook=!0},e.$on("onRepeatLast",function(e,t,n){angular.element(t).parents("#dishBook").booklet({width:"100%",height:600,closed:!0,autoCenter:!0,pageNumbers:!1,pagePadding:0,hoverWidth:100})}),h.closeDialog=function(){s.cancel()},h.fbShare=function(e){var n=t.absUrl()+"/"+e._id;a.fbShare(n)},h.reply=function(e,t){var n="@"+e.userName;u(n,t,e._id)},h.collect=function(t){n.currentUser?c.collect(h.dish._id).then(function(e){e.success&&(h.dish.isCollected=!0)}):e.showLoginDialog(t,!0,"Login/SignUp first to save as favorite").then(function(e){n.currentUser=e,c.collect(h.dish._id).then(function(e){e.success&&(h.dish.isCollected=!0)})})},h.showInstructionPhoto=function(e,t){null!=e&&""!=e.trim()&&s.show({targetEvent:t,clickOutsideToClose:!0,template:'<md-dialog><md-dialog-content><img src="{{photo}}"></md-dialog-content></md-dialog>',controller:["$scope",function(t){t.photo=e}]})},h.newComment=function(t){n.currentUser?u("Comment",t,null):e.showLoginDialog(t,!0,"Login/SignUp first to leave a comment").then(function(e){n.currentUser=e,u("Comment",t,null)})},d.$inject=["title","$mdDialog"]}]).controller("DishEditController",["$mdDialog","$routeParams","DishService","$location","$timeout",function(e,t,n,i,o){function s(e){var t=this;t.newPhoto="",t.closeDialog=function(){e.cancel()},t.submit=function(){e.hide(t.newPhoto)}}function r(e){var t=this;t.newInstruction={photo:"",text:""},t.closeDialog=function(){e.cancel()},t.submit=function(){e.hide(t.newInstruction)}}function c(){n.get(t.dish_id).success(function(e){a.dish=e}),a.difficulties=n.getDifficulties()}var a=this;c(),a.saveDish=function(){n.update(t.dish_id,a.dish).success(function(e){a.updateSuccess=!0,o(function(){a.updateSuccess=!1},1e3)})},a.removeInstruction=function(e){n.removeInstruction(t.dish_id,a.dish.instructions[e]._id).success(function(t){a.dish.instructions.splice(e,1)})},a.removePhoto=function(e){a.dish.photos.splice(e,1),a.saveDish()},a.showAddPhotoDialog=function(t){e.show({targetEvent:t,controller:s,controllerAs:"photoDlg",clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/addPhoto.html"}).then(function(e){a.dish.photos.push(e),a.saveDish()})},a.showAddInstructionDialog=function(i){e.show({targetEvent:i,controller:r,controllerAs:"instructionDlg",clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/addInstruction.html"}).then(function(e){a.dish.instructions.push(e),n.addInstruction(t.dish_id,e).success(function(e){})})},s.$inject=["$mdDialog"],r.$inject=["$mdDialog"]}]),angular.module("spicyTaste").controller("HomeController",["$scope","$mdMedia","DishService","CONSTANTS",function(e,t,n,i){function o(){r.recipeTiles=[],e.$watch(function(){return t("sm")},function(t){e.smallScreen=t}),s()}function s(){n.limit(i.LATEST_COUNT).success(function(e){angular.forEach(e,function(e,t){var n={image:e.imageUrl,title:e.name,id:e._id,prepTime:e.prepTime,totalTime:e.totalTime,difficulty:e.difficulty,tags:e.tags,span:{row:1,col:1}};switch(t+1){case 1:n.span.row=n.span.col=2;break;case 2:case 3:break;case 4:n.span.col=2;case 5:case 6:break;case 7:n.span.row=n.span.col=2;case 8:case 9:break;case 10:n.span.col=2}r.recipeTiles.push(n)})})}var r=this;o()}]),angular.module("spicyTaste").controller("MainController",["$rootScope","$scope","$location","$mdDialog","$http","SessionService","UserService","CONSTANTS",function(e,t,n,i,o,s,r,c){"use strict";function a(e,t,n,i){function r(e){var n=o.defaults.headers.common["X-Auth"];s.setLocal(c.LOCAL_STORAGE_KEY,n),t.hide(e)}var a=this;a.title=e,a.email="",a.password="",a.userName="",a.fbLogin=function(){FB.login(function(e){"connected"===e.status?FB.api("/me",function(e){var t={userName:e.name,email:e.email,password:c.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+e.id+"/picture?type=large",linkedSocial:c.FACEBOOK};n.socialLogin(t).then(function(e){e.loginType=c.FACEBOOK,r(e)})}):"not_authorized"===e.status},{scope:"public_profile,email"})},a.login=function(){n.login(a.email,a.password).then(function(e){e.loginType=c.EMAIL,r(e)})},a.signUp=function(){var e={userName:a.userName,email:a.email,password:a.password,photoUrl:"http://www.gravatar.com/avatar/"+i.createHash(a.email),linkedSocial:c.EMAIL};n.create(e).then(function(e){e.loginType=c.EMAIL,r(e)})}}function l(){u.showMobileMenu=!1,u.scrollTargetReached=!1,u.menuBar={primaryTheme:!1,hidden:!1,text:"SPICY TASTE"};var t=s.getLocal(c.LOCAL_STORAGE_KEY);t&&(console.log("token",t),o.defaults.headers.common["X-Auth"]=t,r.getCurrentUser().then(function(t){e.currentUser=t}))}var u=this;l(),u.toggleMobileMenu=function(){u.showMobileMenu=!u.showMobileMenu},t.setMenuBar=function(e){u.menuBar=e},t.showLoginDialog=function(t,n,o){var s=i.show({clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/login.html",targetEvent:t,controller:a,controllerAs:"login",locals:{dialogTitle:o}});return n?s:void s.then(function(t){e.currentUser=t})},a.$inject=["dialogTitle","$mdDialog","UserService","md5"]}]),angular.module("spicyTaste").controller("ProfileController",["$location","$rootScope","UserService",function(e,t,n){"use strict";function i(){o.user={},n.getById(t.currentUser._id).then(function(e){o.user=e})}var o=this;i(),o.logout=function(){n.logout(),t.currentUser=null,e.path("/")}}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,t,n,i){i.$render=function(){t.html(i.$viewValue||"")},t.bind("blur",function(){e.$apply(function(){i.$setViewValue(t.html())})})}}}),angular.module("spicyTaste").directive("flipbook",function(){return{transclude:!1,restrict:"E",replace:!0,templateUrl:"ng/views/templates/flipbook.html",scope:{dish:"="}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,t){e.$watch("focusValue",function(e,n){e&&!n&&t[0].focus()})}}}),angular.module("spicyTaste").directive("onLastRepeat",["$timeout",function(e){"use strict";return function(t,n,i){t.$last&&e(function(){t.$emit("onRepeatLast",n,i)},0)}}]),angular.module("spicyTaste").directive("scrollTo",function(){return{restrict:"A",link:function(e,t,n){var i=$(n.scrollTo);t.on("click",function(){$("html, body").animate({scrollTop:i.offset().top},600)})}}}),angular.module("spicyTaste").directive("showTime",["$window",function(e){"use strict";return{restrict:"A",scope:!0,link:function(t,n,i){var o=t.$eval(i.showTime),s=0;angular.isUndefined(o)||(s=o.offset),angular.element(e).on("scroll",function(t){if(!n.hasClass("viewed")){var i=angular.element(e).scrollTop(),o=i+angular.element(e).height(),r=n.offset().top,c=r+n.height();0!==s&&(i-r>=0?r+=s:c-=s),o>=c&&r>=i&&n.removeClass("notViewed").addClass("viewed")}})}}}]),angular.module("spicyTaste").directive("topMenuReached",["$window",function(e){"use strict";return{restrict:"A",scope:!0,link:function(t,n,i){var o=n.offset().top-64,s={primaryTheme:!1,hidden:!1,text:"spicy taste"},r=t.$eval(i.topMenuReached);angular.element(e).on("scroll",function(){t.setMenuBar(this.pageYOffset>=o?r:s),t.$apply()})}}}]),angular.module("spicyTaste").factory("DishService",["$http",function(e){var t={};return t.all=function(){return e.get("/api/dishes")},t.limit=function(t){return e.get("/api/dishes?limit="+t)},t.relate=function(t,n,i){return e({method:"GET",url:"/api/dishes",params:{id:t,limit:i,"tags[]":n}})},t.create=function(t){return e.post("/api/dishes",t)},t.get=function(t){return e.get("/api/dishes/"+t)},t.update=function(t,n){return e.put("/api/dishes/"+t,n)},t["delete"]=function(t){return e["delete"]("/api/dishes/"+t)},t.addComment=function(t,n){return e.post("/api/dishes/"+t+"/comments",n)},t.addInstruction=function(t,n){return e.post("/api/dishes/"+t+"/instructions",n)},t.removeInstruction=function(t,n){return e["delete"]("/api/dishes/"+t+"/instructions/"+n)},t.getDifficulties=function(){return["初学","容易","一般","较难","专业"]},t}]),angular.module("spicyTaste").factory("SessionService",["$window",function(e){var t={};return t.getLocal=function(t){if(e.localStorage){var n=e.localStorage.getItem(t);return angular.fromJson(n)}return!1},t.setLocal=function(t,n){return e.localStorage&&e.localStorage.setItem(t,angular.toJson(n))},t}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","$window","CONSTANTS",function(e,t,n,i){"use strict";var o={};return o.socialLogin=function(e){return o.searchBy("email="+e.email).then(function(t){return t.success?o.login(e.email,i.SOCIAL_PASS):o.create(e)})},o.login=function(t,n){return e.post("/api/auth",{email:t,password:n}).then(function(t){return e.defaults.headers.common["X-Auth"]=t.data.token,o.getById(t.data.userId)})},o.logout=function(){delete e.defaults.headers.common["X-Auth"],n.localStorage.removeItem(i.LOCAL_STORAGE_KEY),o.loginedUser=null},o.searchBy=function(t){return e.get("/api/users?"+t).then(function(e){return e.data})},o.getCurrentUser=function(){return e.get("/api/me").then(function(e){return o.getById(e.data)})},o.getById=function(t){return e.get("/api/users/"+t).then(function(e){return e.data})},o.create=function(t){return e.post("/api/users/",t).then(function(){return o.login(t.email,t.password)})},o.update=function(t){return e.put("/api/users/"+t.user_id,t).then(function(e){return e.data})},o.collect=function(n){return e.put("/api/users/"+t.currentUser._id+"/dishes/"+n).then(function(e){return e.data})},o.authorize=function(e){return o.getCurrentUser().then(function(t){return t&&e.indexOf(t.role)>=0?!0:!1},function(e){return!1})},o}]);
//# sourceMappingURL=data:application/json;base64,