angular.module("spicyTaste",["ngRoute"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",SOCIAL_PASS:"PASSWORD"}),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,o){e.user=null,n.fbAsyncInit=function(){FB.init({appId:o.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var o,i=e.getElementsByTagName(n)[0];e.getElementById(t)||(o=e.createElement(n),o.id=t,o.src="//connect.facebook.net/en_US/sdk.js",i.parentNode.insertBefore(o,i))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/create",{templateUrl:"ng/views/pages/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"})}]),angular.module("spicyTaste").controller("DishListController",["DishService",function(e){var n=this;n.processing=!0,e.all().success(function(e){n.processing=!1,n.dishes=e}),n.deleteDish=function(t){n.processing=!0,e["delete"](t).success(function(){e.all().success(function(e){n.processing=!1,n.dishes=e})})}}]).controller("DishCreateController",["DishService",function(e){var n=this;n.type="create",n.save=function(){n.processing=!0,n.message="",e.create(n.dish).success(function(e){n.processing=!1,n.dish={},n.message=e.message})}}]).controller("DishEditController",["$routeParams","DishService",function(e,n){var t=this;t.type="edit",n.get(e.dish_id).success(function(e){t.dish=e}),t.save=function(){t.processing=!0,t.message="",n.update(e.dish_id,t.dish).success(function(e){t.processing=!1,t.dish={},t.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",function(){}),angular.module("spicyTaste").controller("LoginController",["$scope","UserService","$location","CONSTANTS",function(e,n,t,o){var i=this;i.fbLogin=function(){FB.login(function(i){"connected"===i.status?FB.api("/me",function(i){console.log("FB.api /me response: ",i),n.socialLogin(i.email,o.FACEBOOK).then(function(n){console.log("fbLogin: ",n),e.$emit("login",n),t.path("/")})}):"not_authorized"===i.status},{scope:"public_profile,email"})}}]),angular.module("spicyTaste").controller("MainController",["$scope","UserService",function(e,n){var t=this;e.$on("login",function(e,n){console.log("MainController login event called."),t.currentUser=n}),e.logout=function(){t.currentUser=null,n.logout()}}]),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n}]),angular.module("spicyTaste").factory("UserService",["$rootScope","$http","CONSTANTS",function(e,n,t){var o={};return o.fbLogout=function(){FB.logout(function(){e.$apply(function(){e.user=null})})},o.socialLogin=function(e,n){return o.getByEmail(e).then(function(i){if(console.log("getByEmail: ",i),i.success){var s=i.user;return s.linkedSocial.indexOf(n)<0?(s.linkedSocial.push(n),o.update(s).then(function(){return o.login(s.email,t.SOCIAL_PASS)})):o.login(s.email,t.SOCIAL_PASS)}var r={email:e,password:t.SOCIAL_PASS,social:n};return o.create(r)})},o.login=function(e,t){return n.post("/api/auth",{email:e,password:t}).then(function(e){return n.defaults.headers.common["X-Auth"]=e.data,o.get()})},o.get=function(){return n.get("/api/users/me").then(function(e){return e.data})},o.getByEmail=function(e){return n.get("/api/users/"+e).then(function(e){return e.data})},o.create=function(e){return n.post("/api/users/",e).then(function(){return o.login(e.email,e.password)})},o.update=function(e,t){return n.put("/api/users/"+e,t).then(function(e){return e.data})},o}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImZhY2Vib29rLmpzIiwicm91dGVzLmpzIiwiY29udHJvbGxlcnMvZGlzaENvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9ob21lQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2xvZ2luQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL21haW5Db250cm9sbGVyLmpzIiwic2VydmljZXMvZGlzaFNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyU2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiLCJGQl9BUFBfSUQiLCJGQUNFQk9PSyIsIlNPQ0lBTF9QQVNTIiwicnVuIiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCJVc2VyU2VydmljZSIsIkNPTlNUQU5UUyIsInVzZXIiLCJmYkFzeW5jSW5pdCIsIkZCIiwiaW5pdCIsImFwcElkIiwiY29va2llIiwieGZibWwiLCJ2ZXJzaW9uIiwiZCIsInMiLCJpZCIsImpzIiwiZmpzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiZG9jdW1lbnQiLCJjb25maWciLCIkbG9jYXRpb25Qcm92aWRlciIsIiRyb3V0ZVByb3ZpZGVyIiwiaHRtbDVNb2RlIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIkRpc2hTZXJ2aWNlIiwidm0iLCJ0aGlzIiwicHJvY2Vzc2luZyIsImFsbCIsInN1Y2Nlc3MiLCJkYXRhIiwiZGlzaGVzIiwiZGVsZXRlRGlzaCIsInR5cGUiLCJzYXZlIiwibWVzc2FnZSIsImNyZWF0ZSIsImRpc2giLCIkcm91dGVQYXJhbXMiLCJnZXQiLCJkaXNoX2lkIiwidXBkYXRlIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiZmJMb2dpbiIsImxvZ2luIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJhcGkiLCJjb25zb2xlIiwibG9nIiwic29jaWFsTG9naW4iLCJlbWFpbCIsInRoZW4iLCIkZW1pdCIsInBhdGgiLCJzY29wZSIsIiRvbiIsIl8iLCJjdXJyZW50VXNlciIsImxvZ291dCIsImZhY3RvcnkiLCIkaHR0cCIsImRpc2hGYWN0b3J5IiwicG9zdCIsInB1dCIsInVzZXJGYWN0b3J5IiwiZmJMb2dvdXQiLCIkYXBwbHkiLCJvcmlnaW4iLCJnZXRCeUVtYWlsIiwibGlua2VkU29jaWFsIiwiaW5kZXhPZiIsInB1c2giLCJuZXdVc2VyIiwicGFzc3dvcmQiLCJzb2NpYWwiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJ1c2VyX2lkIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxjQUFBLFlBQ0FDLFNBQUEsYUFDQUMsVUFBQSxnQkFDQUMsU0FBQSxLQUNBQyxZQUFBLGFDSkFMLFFBQUFDLE9BQUEsY0FDQUssS0FBQSxhQUFBLFVBQUEsY0FBQSxZQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FILEVBQUFJLEtBQUEsS0FFQUgsRUFBQUksWUFBQSxXQUNBQyxHQUFBQyxNQUNBQyxNQUFBTCxFQUFBUCxVQUNBYSxRQUFBLEVBQ0FDLE9BQUEsRUFDQUMsUUFBQSxVQUtBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsRUFBQUosRUFBQUsscUJBQUFKLEdBQUEsRUFDQUQsR0FBQU0sZUFBQUosS0FDQUMsRUFBQUgsRUFBQU8sY0FBQU4sR0FDQUUsRUFBQUQsR0FBQUEsRUFDQUMsRUFBQUssSUFBQSxzQ0FDQUosRUFBQUssV0FBQUMsYUFBQVAsRUFBQUMsS0FDQU8sU0FBQSxTQUFBLHFCQ3JCQTlCLFFBQUFDLE9BQUEsY0FDQThCLFFBQUEsb0JBQUEsaUJBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQUUsV0FBQSxHQUVBRCxFQUVBRSxLQUFBLEtBQ0FDLFlBQUEsMkJBQ0FDLFdBQUEsaUJBQ0FDLGFBQUEsU0FHQUgsS0FBQSxXQUNBQyxZQUFBLGdDQUNBQyxX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QUFBQSxHQUFBaEIsUUFLQW9DLEVBQUFJLFdBQUEsU0FBQWxCLEdBQ0EsTUFBQVUsR0FBQXZCLElBQUEsY0FBQWEsR0FBQUMsS0FBQSxTQUFBUCxHQUNBLE1BQUFBLEdBQUFoQixRQUtBb0MsRUFBQTlCLE9BQUEsU0FBQXhDLEdBQ0EsTUFBQWtFLEdBQUFFLEtBQUEsY0FBQXBFLEdBQUF5RCxLQUFBLFdBQ0EsTUFBQWEsR0FBQXJCLE1BQUFqRCxFQUFBd0QsTUFBQXhELEVBQUErRSxhQUtBVCxFQUFBekIsT0FBQSxTQUFBdUMsRUFBQXBGLEdBQ0EsTUFBQWtFLEdBQUFHLElBQUEsY0FBQWUsRUFBQXBGLEdBQUF5RCxLQUFBLFNBQUFQLEdBQ0EsTUFBQUEsR0FBQWhCLFFBSUFvQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScsIFsnbmdSb3V0ZSddKVxuICAgIC5jb25zdGFudCgnQ09OU1RBTlRTJywge1xuICAgICAgICBcIkZCX0FQUF9JRFwiOiAxNTYzNTY3Mzg3MjUzNDY4LFxuICAgICAgICBcIkZBQ0VCT09LXCI6IFwiRkJcIixcbiAgICAgICAgXCJTT0NJQUxfUEFTU1wiOiBcIlBBU1NXT1JEXCJcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUsICR3aW5kb3csIFVzZXJTZXJ2aWNlLCBDT05TVEFOVFMpIHtcbiAgICAgICAgJHJvb3RTY29wZS51c2VyID0gbnVsbDtcblxuICAgICAgICAkd2luZG93LmZiQXN5bmNJbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBGQi5pbml0KHtcbiAgICAgICAgICAgICAgICBhcHBJZDogQ09OU1RBTlRTLkZCX0FQUF9JRCxcbiAgICAgICAgICAgICAgICBjb29raWU6IHRydWUsIC8vIGVuYWJsZSBjb29raWVzIHRvIGFsbG93IHRoZSBzZXJ2ZXIgdG8gYWNjZXNzIHRoZSBzZXNzaW9uXG4gICAgICAgICAgICAgICAgeGZibWw6IHRydWUsIC8vIHBhcnNlIHNvY2lhbCBwbHVnaW5zIG9uIHRoaXMgcGFnZVxuICAgICAgICAgICAgICAgIHZlcnNpb246ICd2Mi4yJyAvLyB1c2UgdmVyc2lvbiAyLjJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIExvYWQgdGhlIFNESyBhc3luY2hyb25vdXNseVxuICAgICAgICAoZnVuY3Rpb24oZCwgcywgaWQpIHtcbiAgICAgICAgICAgIHZhciBqcywgZmpzID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXTtcbiAgICAgICAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkgcmV0dXJuO1xuICAgICAgICAgICAganMgPSBkLmNyZWF0ZUVsZW1lbnQocyk7XG4gICAgICAgICAgICBqcy5pZCA9IGlkO1xuICAgICAgICAgICAganMuc3JjID0gXCIvL2Nvbm5lY3QuZmFjZWJvb2submV0L2VuX1VTL3Nkay5qc1wiO1xuICAgICAgICAgICAgZmpzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGpzLCBmanMpO1xuICAgICAgICB9KGRvY3VtZW50LCAnc2NyaXB0JywgJ2ZhY2Vib29rLWpzc2RrJykpO1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIsICRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcblxuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAvL2hvbWUgcGFnZVxuICAgICAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy9ob21lLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnaG9tZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL3Nob3cgYWxsIGRpc2hlcyBwYWdlXG4gICAgICAgICAgICAud2hlbignL2Rpc2hlcycsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL2Rpc2gvbGlzdC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGlzaExpc3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkaXNoTGlzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2NyZWF0ZSBhIG5ldyBkaXNoIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvZGlzaGVzL2NyZWF0ZScsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL2Rpc2gvc2luZ2xlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEaXNoQ3JlYXRlQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaE1hbmFnZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2VkaXQgYSBkaXNoIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvZGlzaGVzLzpkaXNoX2lkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvZGlzaC9zaW5nbGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hFZGl0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaE1hbmFnZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2xvZ2luIHVzZXJcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy91c2VyL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZ2luJ1xuICAgICAgICAgICAgfSlcblxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC8vY29udHJvbGxlciBhcHBsaWVkIHRvIGRpc2ggbGlzdCBwYWdlXG4gICAgLmNvbnRyb2xsZXIoJ0Rpc2hMaXN0Q29udHJvbGxlcicsIGZ1bmN0aW9uKERpc2hTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy9zZXQgYSBwcm9jZXNzaW5nIHZhcmlhYmxlIHRvIHNob3cgbG9hZGluZ1xuICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgICAgICAvL2dyYWIgYWxsIHRoZSBkaXNoZXMgYXQgcGFnZSBsb2FkXG4gICAgICAgIERpc2hTZXJ2aWNlLmFsbCgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgLy93aGVuIGFsbCBkaXNoZXMgZmV0Y2hlZCwgcmVtb3ZlIHByb2Nlc3NpbmcgdmFyaWFibGVcbiAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy9iaW5kIHRoZSBkaXNoZXNcbiAgICAgICAgICAgIHZtLmRpc2hlcyA9IGRhdGE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vZnVuY3Rpb24gdG8gZGVsZXRlIGEgZGlzaFxuICAgICAgICB2bS5kZWxldGVEaXNoID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZtLnByb2Nlc3NpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBEaXNoU2VydmljZS5kZWxldGUoaWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIERpc2hTZXJ2aWNlLmFsbCgpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZtLmRpc2hlcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC8vY29udHJvbGxlciBhcHBsaWVkIHRvIGRpc2ggY3JlYXRpb24gcGFnZVxuICAgIC5jb250cm9sbGVyKCdEaXNoQ3JlYXRlQ29udHJvbGxlcicsIGZ1bmN0aW9uKERpc2hTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgdm0udHlwZSA9IFwiY3JlYXRlXCI7XG5cbiAgICAgICAgdm0uc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdm0ucHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICB2bS5tZXNzYWdlID0gJyc7XG5cbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLmNyZWF0ZSh2bS5kaXNoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdm0uZGlzaCA9IHt9O1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC8vY29udHJvbGxlciBhcHBsaWVkIHRvIGRpc2ggZWRpdCBwYWdlXG4gICAgLmNvbnRyb2xsZXIoJ0Rpc2hFZGl0Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRyb3V0ZVBhcmFtcywgRGlzaFNlcnZpY2UpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS50eXBlID0gXCJlZGl0XCI7XG5cbiAgICAgICAgLy9nZXQgdGhlIGRpc2ggYnkgaWRcbiAgICAgICAgRGlzaFNlcnZpY2UuZ2V0KCRyb3V0ZVBhcmFtcy5kaXNoX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZtLmRpc2ggPSBkYXRhO1xuICAgICAgICB9KTtcblxuICAgICAgICB2bS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnJztcblxuICAgICAgICAgICAgRGlzaFNlcnZpY2UudXBkYXRlKCRyb3V0ZVBhcmFtcy5kaXNoX2lkLCB2bS5kaXNoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5wcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB2bS5kaXNoID0ge307XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9IGRhdGEubWVzc2FnZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU2VydmljZSwgJGxvY2F0aW9uLCBDT05TVEFOVFMpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICB2bS5mYkxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBGQi5sb2dpbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExvZ2dlZCBpbnRvIHlvdXIgYXBwIGFuZCBGYWNlYm9vay5cbiAgICAgICAgICAgICAgICAgICAgRkIuYXBpKCcvbWUnLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZCLmFwaSAvbWUgcmVzcG9uc2U6ICcsIHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2Uuc29jaWFsTG9naW4ocmVzcG9uc2UuZW1haWwsIENPTlNUQU5UUy5GQUNFQk9PSykudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZiTG9naW46ICcsIHVzZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnbm90X2F1dGhvcml6ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwZXJzb24gaXMgbG9nZ2VkIGludG8gRmFjZWJvb2ssIGJ1dCBub3QgeW91ciBhcHAuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHBlcnNvbiBpcyBub3QgbG9nZ2VkIGludG8gRmFjZWJvb2ssIHNvIHdlJ3JlIG5vdCBzdXJlIGlmXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXkgYXJlIGxvZ2dlZCBpbnRvIHRoaXMgYXBwIG9yIG5vdC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICdwdWJsaWNfcHJvZmlsZSxlbWFpbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU2VydmljZSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24oXywgdXNlcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ01haW5Db250cm9sbGVyIGxvZ2luIGV2ZW50IGNhbGxlZC4nKTtcbiAgICAgICAgICAgIHZtLmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgICAgfSlcblxuICAgICAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2bS5jdXJyZW50VXNlciA9IG51bGw7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgfTtcblxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5mYWN0b3J5KCdEaXNoU2VydmljZScsIGZ1bmN0aW9uKCRodHRwKSB7XG5cbiAgICAgICAgLy9jcmVhdGUgYSBuZXcgb2JqZWN0XG4gICAgICAgIHZhciBkaXNoRmFjdG9yeSA9IHt9O1xuXG4gICAgICAgIC8vZ2V0IGFsbCBkaXNoZXNcbiAgICAgICAgZGlzaEZhY3RvcnkuYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2Rpc2hlcycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vY3JlYXRlIGEgZGlzaFxuICAgICAgICBkaXNoRmFjdG9yeS5jcmVhdGUgPSBmdW5jdGlvbihkaXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9kaXNoZXMnLCBkaXNoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvL2dldCBhIHNpbmdsZSBkaXNoXG4gICAgICAgIGRpc2hGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGRpc2hfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZGlzaGVzLycgKyBkaXNoX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXBkYXRlIGEgZGlzaFxuICAgICAgICBkaXNoRmFjdG9yeS51cGRhdGUgPSBmdW5jdGlvbihkaXNoX2lkLCBkaXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCwgZGlzaCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2RlbGV0ZSBhIGRpc2hcbiAgICAgICAgZGlzaEZhY3RvcnkuZGVsZXRlID0gZnVuY3Rpb24oZGlzaF9pZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9kaXNoZXMvJyArIGRpc2hfaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRpc2hGYWN0b3J5O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5mYWN0b3J5KCdVc2VyU2VydmljZScsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRodHRwLCBDT05TVEFOVFMpIHtcbiAgICAgICAgdmFyIHVzZXJGYWN0b3J5ID0ge307XG4gICAgICAgIC8vbG9nb3V0IGZhY2Vib29rIHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkuZmJMb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEZCLmxvZ291dChmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9zb2NpYWwgbG9naW5cbiAgICAgICAgdXNlckZhY3Rvcnkuc29jaWFsTG9naW4gPSBmdW5jdGlvbihlbWFpbCwgb3JpZ2luKSB7XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5nZXRCeUVtYWlsKGVtYWlsKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImdldEJ5RW1haWw6IFwiLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgIGlmICghZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbm90IGZvdW5kLCB0aGVuIGNyZWF0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBDT05TVEFOVFMuU09DSUFMX1BBU1MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb2NpYWw6IG9yaWdpblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkuY3JlYXRlKG5ld1VzZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vZm91bmQgb25lIHdpdGggZW1haWxcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIGxpbmtlZCBzb2NpYWwgaWYgbm90IGFkZGVkXG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0gZGF0YS51c2VyO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlci5saW5rZWRTb2NpYWwuaW5kZXhPZihvcmlnaW4pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5saW5rZWRTb2NpYWwucHVzaChvcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LnVwZGF0ZSh1c2VyKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5sb2dpbih1c2VyLmVtYWlsLCBDT05TVEFOVFMuU09DSUFMX1BBU1MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkubG9naW4odXNlci5lbWFpbCwgQ09OU1RBTlRTLlNPQ0lBTF9QQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9sb2dpbiB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3N3b3JkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2F1dGgnLCB7XG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkuZ2V0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgY3VycmVudCB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy9tZScpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgdXNlciBieSBlbWFpbFxuICAgICAgICB1c2VyRmFjdG9yeS5nZXRCeUVtYWlsID0gZnVuY3Rpb24oZW1haWwpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvJyArIGVtYWlsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY3JlYXRlIGEgbmV3IHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkuY3JlYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJywgdXNlcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkubG9naW4odXNlci5lbWFpbCwgdXNlci5wYXNzd29yZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXBkYXRlIHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkudXBkYXRlID0gZnVuY3Rpb24odXNlcl9pZCwgdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS91c2Vycy8nICsgdXNlcl9pZCwgdXNlcikudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXNlckZhY3Rvcnk7XG4gICAgfSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=