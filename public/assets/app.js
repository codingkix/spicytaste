angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD",LOCAL_STORAGE_KEY:"spicyTasteUser",LATEST_COUNT:10}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,t){var n=e.extendPalette("deep-orange",{500:"f27242"}),i=e.extendPalette("blue",{500:"6984b4",600:"6984b4"});e.definePalette("primaryOrange",n),e.definePalette("primaryBlue",i),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),e.theme("blue").primaryPalette("primaryBlue"),t.icon("menu","svg/ic_menu_24px.svg").icon("share","svg/ic_share_48px.svg").icon("login","svg/ic_account_circle_24px.svg").icon("recipes","svg/ic_event_note_48px.svg").icon("restaurants","svg/ic_restaurant_menu_48px.svg").icon("ingredients","svg/ic_receipt_48px.svg").icon("arrow","svg/ic_arrow_drop_up_48px.svg").icon("more","svg/ic_more_24px.svg").icon("time1","svg/ic_av_timer_24px.svg").icon("time2","svg/ic_access_time_24px.svg").icon("difficulty","svg/ic_track_changes_24px.svg").icon("exit","svg/ic_exit_to_app_48px.svg").icon("photo","svg/ic_mms_24px.svg").icon("check","svg/ic_check_circle_24px.svg").icon("facebook","svg/facebook.svg").icon("twitter","svg/twitter.svg").icon("pinterest","svg/pinterest.svg").icon("comments","svg/ic_chat_48px.svg").icon("menu","svg/ic_menu_48px.svg").icon("favorite","svg/ic_favorite_24px.svg").icon("delete","svg/ic_delete_48px.svg").icon("add","svg/ic_add_circle_outline_48px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$location","$window","CONSTANTS","UserService",function(e,t,n,i,o){n.fbAsyncInit=function(){FB.init({appId:i.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,t,n){var i,o=e.getElementsByTagName(t)[0];e.getElementById(n)||(i=e.createElement(t),i.id=n,i.src="//connect.facebook.net/en_US/sdk.js",o.parentNode.insertBefore(i,o))}(document,"script","facebook-jssdk"),e.$on("$routeChangeStart",function(e,n){n.access&&o.authorize(n.access.requirePermissions).then(function(e){e||t.path("not-authorize").replace()})})}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,t){e.html5Mode(!0),t.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"dishDetail"}).when("/admin/dishes",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList",access:{requirePermissions:["Admin"]}}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage",access:{requirePermissions:["Admin"]}}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"}).when("/not-authorize",{templateUrl:"ng/views/pages/not-authorize.html"})}]),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,t,n){var i=this;e.all().success(function(e){i.dishes=e}),i.deleteDish=function(t){var n=i.dishes[t];e["delete"](n._id).success(function(e){i.dishes.splice(t,1)})},i.addDish=function(){e.create({name:"new dish"}).success(function(e){n.path("/admin/dishes/"+e.dish._id)})},i.goToEdit=function(e){n.path("/admin/dishes/"+e)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","$filter","$mdDialog","DishService","UserService","SocialService",function(e,t,n,i,o,s,r,c,a){function l(){h.dish={},h.relatedDishes={},r.get(i.dish_id).success(function(e){if(h.dish=e,h.dish.isCollected=!1,r.relate(h.dish._id,h.dish.tags,3).success(function(e){h.relatedDishes=e}),n.currentUser){var t=o("filter")(n.currentUser.favouriteDishes,{_id:h.dish._id},!0);t.length&&(h.dish.isCollected=!0)}})}function u(e,t,n){s.show({targetEvent:t,clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/comment.html",locals:{title:e},controller:d,controllerAs:"comment"}).then(function(e){r.addComment(h.dish._id,{content:e,replyTo:n}).success(function(e){h.dish.comments.push(e)})})}function d(e,t){var n=this;n.content="",n.title=e,n.closeDialog=function(){t.cancel()},n.submit=function(){""==n.content.trim()?t.cancel():t.hide(n.content)}}var h=this;h.dish={},l(),h.enterFlipBook=function(e){s.show({targetEvent:e,clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/flipbook.html",controller:"DishDetailController",controllerAs:"book"})["finally"](function(){n.shownBook=!1}),n.shownBook=!0},e.$on("onRepeatLast",function(e,t,n){angular.element(t).parents("#dishBook").booklet({width:"100%",height:600,closed:!0,autoCenter:!0,pageNumbers:!1,pagePadding:0,hoverWidth:100})}),h.closeDialog=function(){s.cancel()},h.fbShare=function(e){var n=t.absUrl()+"/"+e._id;a.fbShare(n)},h.reply=function(e,t){var n="@"+e.userName;u(n,t,e._id)},h.collect=function(t){n.currentUser?c.collect(h.dish._id).then(function(e){e.success&&(h.dish.isCollected=!0)}):e.showLoginDialog(t,!0,"Login/SignUp first to save as favorite").then(function(e){n.currentUser=e,c.collect(h.dish._id).then(function(e){e.success&&(h.dish.isCollected=!0)})})},h.showInstructionPhoto=function(e,t){null!=e&&""!=e.trim()&&s.show({targetEvent:t,clickOutsideToClose:!0,template:'<md-dialog><md-dialog-content><img src="{{photo}}"></md-dialog-content></md-dialog>',controller:["$scope",function(t){t.photo=e}]})},h.newComment=function(t){n.currentUser?u("Comment",t,null):e.showLoginDialog(t,!0,"Login/SignUp first to leave a comment").then(function(e){n.currentUser=e,u("Comment",t,null)})},d.$inject=["title","$mdDialog"]}]).controller("DishEditController",["$mdDialog","$routeParams","DishService","$location","$timeout",function(e,t,n,i,o){function s(e){var t=this;t.newPhoto="",t.closeDialog=function(){e.cancel()},t.submit=function(){e.hide(t.newPhoto)}}function r(e){var t=this;t.newInstruction={photo:"",text:""},t.closeDialog=function(){e.cancel()},t.submit=function(){e.hide(t.newInstruction)}}function c(){n.get(t.dish_id).success(function(e){a.dish=e}),a.difficulties=n.getDifficulties()}var a=this;c(),a.saveDish=function(){n.update(t.dish_id,a.dish).success(function(e){a.updateSuccess=!0,o(function(){a.updateSuccess=!1},1e3)})},a.removeInstruction=function(e){n.removeInstruction(t.dish_id,a.dish.instructions[e]._id).success(function(t){a.dish.instructions.splice(e,1)})},a.removePhoto=function(e){a.dish.photos.splice(e,1),a.saveDish()},a.showAddPhotoDialog=function(t){e.show({targetEvent:t,controller:s,controllerAs:"photoDlg",clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/addPhoto.html"}).then(function(e){a.dish.photos.push(e),a.saveDish()})},a.showAddInstructionDialog=function(i){e.show({targetEvent:i,controller:r,controllerAs:"instructionDlg",clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/addInstruction.html"}).then(function(e){a.dish.instructions.push(e),n.addInstruction(t.dish_id,e).success(function(e){})})},s.$inject=["$mdDialog"],r.$inject=["$mdDialog"]}]),angular.module("spicyTaste").controller("HomeController",["$scope","$mdMedia","DishService","CONSTANTS",function(e,t,n,i){function o(){r.recipeTiles=[],e.$watch(function(){return t("sm")},function(t){e.smallScreen=t}),s()}function s(){n.limit(i.LATEST_COUNT).success(function(e){angular.forEach(e,function(e,t){var n={image:e.imageUrl,title:e.name,id:e._id,prepTime:e.prepTime,totalTime:e.totalTime,difficulty:e.difficulty,tags:e.tags,span:{row:1,col:1}};switch(t+1){case 1:n.span.row=n.span.col=2;break;case 2:case 3:break;case 4:n.span.col=2;case 5:case 6:break;case 7:n.span.row=n.span.col=2;case 8:case 9:break;case 10:n.span.col=2}r.recipeTiles.push(n)})})}var r=this;o()}]),angular.module("spicyTaste").controller("MainController",["$rootScope","$scope","$location","$mdDialog","$http","SessionService","UserService","CONSTANTS",function(e,t,n,i,o,s,r,c){function a(e,t,n,i){function r(e){var n=o.defaults.headers.common["X-Auth"];s.setLocal(c.LOCAL_STORAGE_KEY,n),t.hide(e)}var a=this;a.title=e,a.email="",a.password="",a.userName="",a.fbLogin=function(){FB.login(function(e){"connected"===e.status?FB.api("/me",function(e){var t={userName:e.name,email:e.email,password:c.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+e.id+"/picture?type=large",linkedSocial:c.FACEBOOK};n.socialLogin(t).then(function(e){e.loginType=c.FACEBOOK,r(e)})}):"not_authorized"===e.status},{scope:"public_profile,email"})},a.login=function(){n.login(a.email,a.password).then(function(e){e.loginType=c.EMAIL,r(e)})},a.signUp=function(){var e={userName:a.userName,email:a.email,password:a.password,photoUrl:"http://www.gravatar.com/avatar/"+i.createHash(a.email),linkedSocial:c.EMAIL};n.create(e).then(function(e){e.loginType=c.EMAIL,r(e)})}}function l(){u.showMobileMenu=!1;var t=s.getLocal(c.LOCAL_STORAGE_KEY);t&&(o.defaults.headers.common["X-Auth"]=t,r.get().then(function(t){e.currentUser=t}))}var u=this;l(),u.toggleMobileMenu=function(){u.showMobileMenu=!u.showMobileMenu},t.showLoginDialog=function(t,o,s){var r=i.show({clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/login.html",targetEvent:t,controller:a,controllerAs:"login",locals:{dialogTitle:s}});return o?r:void r.then(function(t){e.currentUser=t,n.path(t.role&&"Admin"==t.role?"/admin/dishes":"/")})},a.$inject=["dialogTitle","$mdDialog","UserService","md5"]}]),angular.module("spicyTaste").controller("ProfileController",["$location","$rootScope","UserService",function(e,t,n){function i(){o.user={},n.get().then(function(e){o.user=e})}var o=this;i(),o.logout=function(){n.logout(),t.currentUser=null,e.path("/")}}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,t,n,i){i.$render=function(){t.html(i.$viewValue||"")},t.bind("blur",function(){e.$apply(function(){i.$setViewValue(t.html())})})}}}),angular.module("spicyTaste").directive("flipbook",function(){return{transclude:!1,restrict:"E",replace:!0,templateUrl:"ng/views/templates/flipbook.html",scope:{dish:"="}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,t){e.$watch("focusValue",function(e,n){e&&!n&&t[0].focus()})}}}),angular.module("spicyTaste").directive("onLastRepeat",["$timeout",function(e){return function(t,n,i){t.$last&&e(function(){t.$emit("onRepeatLast",n,i)},0)}}]),angular.module("spicyTaste").factory("DishService",["$http",function(e){var t={};return t.all=function(){return e.get("/api/dishes")},t.limit=function(t){return e.get("/api/dishes?limit="+t)},t.relate=function(t,n,i){return e({method:"GET",url:"/api/dishes",params:{id:t,limit:i,"tags[]":n}})},t.create=function(t){return e.post("/api/dishes",t)},t.get=function(t){return e.get("/api/dishes/"+t)},t.update=function(t,n){return e.put("/api/dishes/"+t,n)},t["delete"]=function(t){return e["delete"]("/api/dishes/"+t)},t.addComment=function(t,n){return e.post("/api/dishes/"+t+"/comments",n)},t.addInstruction=function(t,n){return e.post("/api/dishes/"+t+"/instructions",n)},t.removeInstruction=function(t,n){return e["delete"]("/api/dishes/"+t+"/instructions/"+n)},t.getDifficulties=function(){return["初学","容易","一般","较难","专业"]},t}]),angular.module("spicyTaste").factory("SessionService",["$window",function(e){var t={};return t.getLocal=function(t){if(e.localStorage){var n=e.localStorage.getItem(t);return angular.fromJson(n)}return!1},t.setLocal=function(t,n){return e.localStorage&&e.localStorage.setItem(t,angular.toJson(n))},t}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","$window","CONSTANTS",function(e,t,n,i){var o={};return o.socialLogin=function(e){return o.searchBy("email="+e.email).then(function(t){if(t.success){var n=t.users[0];return n.linkedSocial.indexOf(e.linkedSocial)<0?(n.linkedSocial.push(e.linkedSocial),n.userName=e.userName,n.photoUrl=e.photoUrl,o.update(n).then(function(){return o.login(n.email,i.SOCIAL_PASS)})):o.login(n.email,i.SOCIAL_PASS)}return o.create(e)})},o.login=function(t,n){return e.post("/api/auth",{email:t,password:n}).then(function(t){return e.defaults.headers.common["X-Auth"]=t.data,o.get()})},o.logout=function(){delete e.defaults.headers.common["X-Auth"],n.localStorage.removeItem(i.LOCAL_STORAGE_KEY),o.loginedUser=null},o.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},o.searchBy=function(t){return e.get("/api/users?"+t).then(function(e){return e.data})},o.getById=function(t){return e.get("/api/users/"+t).then(function(e){return e.data})},o.create=function(t){return e.post("/api/users/",t).then(function(){return o.login(t.email,t.password)})},o.update=function(t,n){return e.put("/api/users/"+t,n).then(function(e){return e.data})},o.collect=function(n){return e.put("/api/users/"+t.currentUser._id+"/dishes/"+n).then(function(e){return e.data})},o.authorize=function(e){return o.get().then(function(t){return t&&e.indexOf(t.role)>=0?!0:!1},function(e){return!1})},o}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImRlc2lnbi5qcyIsIm1vZHVsZS5ydW4uanMiLCJyb3V0ZXMuanMiLCJjb250cm9sbGVycy9kaXNoQ29udHJvbGxlci5qcyIsImFwcC5qcyIsImNvbnRyb2xsZXJzL2hvbWVDb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbWFpbkNvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9wcm9maWxlQ29udHJvbGxlci5qcyIsImRpcmVjdGl2ZXMvY29udGVudGVkaXRhYmxlRGlyZWN0aXZlLmpzIiwiZGlyZWN0aXZlcy9mbGlwQm9va0RpcmVjdGl2ZS5qcyIsImRpcmVjdGl2ZXMvZm9jdXNPbkRpcmVjdGl2ZS5qcyIsImRpcmVjdGl2ZXMvb25MYXN0UmVwZWF0LmpzIiwic2VydmljZXMvZGlzaFNlcnZpY2UuanMiLCJzZXJ2aWNlcy9zZXNzaW9uU2VydmljZS5qcyIsInNlcnZpY2VzL3NvY2lhbFNlcnZpY2UuanMiLCJzZXJ2aWNlcy91c2VyU2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiLCJGQl9BUFBfSUQiLCJGQUNFQk9PSyIsIkVNQUlMIiwiU09DSUFMX1BBU1MiLCJMT0NBTF9TVE9SQUdFX0tFWSIsIkxBVEVTVF9DT1VOVCIsImNvbmZpZyIsIiRtZFRoZW1pbmdQcm92aWRlciIsIiRtZEljb25Qcm92aWRlciIsInByaW1hcnlPcmFuZ2UiLCJleHRlbmRQYWxldHRlIiwiNTAwIiwicHJpbWFyeUJsdWUiLCI2MDAiLCJkZWZpbmVQYWxldHRlIiwidGhlbWUiLCJwcmltYXJ5UGFsZXR0ZSIsImFjY2VudFBhbGV0dGUiLCJpY29uIiwicnVuIiwiJHJvb3RTY29wZSIsIiRsb2NhdGlvbiIsIiR3aW5kb3ciLCJDT05TVEFOVFMiLCJVc2VyU2VydmljZSIsImZiQXN5bmNJbml0IiwiRkIiLCJpbml0IiwiYXBwSWQiLCJjb29raWUiLCJ4ZmJtbCIsInZlcnNpb24iLCJkIiwicyIsImlkIiwianMiLCJmanMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJkb2N1bWVudCIsIiRvbiIsImV2ZW50IiwibmV4dCIsImFjY2VzcyIsImF1dGhvcml6ZSIsInJlcXVpcmVQZXJtaXNzaW9ucyIsInRoZW4iLCJyZXN1bHQiLCJwYXRoIiwicmVwbGFjZSIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHJvdXRlUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiRGlzaFNlcnZpY2UiLCJTb2NpYWxTZXJ2aWNlIiwidm0iLCJ0aGlzIiwiYWxsIiwic3VjY2VzcyIsImRhdGEiLCJkaXNoZXMiLCJkZWxldGVEaXNoIiwiaW5kZXgiLCJkaXNoIiwiX2lkIiwic3BsaWNlIiwiYWRkRGlzaCIsImNyZWF0ZSIsIm5hbWUiLCJnb1RvRWRpdCIsIiRzY29wZSIsIiRyb3V0ZVBhcmFtcyIsIiRmaWx0ZXIiLCIkbWREaWFsb2ciLCJyZWxhdGVkRGlzaGVzIiwiZ2V0IiwiZGlzaF9pZCIsImlzQ29sbGVjdGVkIiwicmVsYXRlIiwidGFncyIsImN1cnJlbnRVc2VyIiwiZm91bmQiLCJmYXZvdXJpdGVEaXNoZXMiLCJsZW5ndGgiLCJvcGVuQ29tbWVudERpYWxvZyIsInRpdGxlIiwiJGV2ZW50IiwicmVwbHlUbyIsInNob3ciLCJ0YXJnZXRFdmVudCIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJsb2NhbHMiLCJjb21tZW50Q29udHJvbGxlciIsImNvbnRlbnQiLCJhZGRDb21tZW50IiwiY29tbWVudCIsImNvbW1lbnRzIiwicHVzaCIsImR2bSIsImNsb3NlRGlhbG9nIiwiY2FuY2VsIiwic3VibWl0IiwidHJpbSIsImhpZGUiLCJlbnRlckZsaXBCb29rIiwiZXZuIiwic2hvd25Cb29rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJwYXJlbnRzIiwiYm9va2xldCIsIndpZHRoIiwiaGVpZ2h0IiwiY2xvc2VkIiwiYXV0b0NlbnRlciIsInBhZ2VOdW1iZXJzIiwicGFnZVBhZGRpbmciLCJob3ZlcldpZHRoIiwiZmJTaGFyZSIsImRpc2hMaW5rIiwiYWJzVXJsIiwicmVwbHkiLCJ1c2VyIiwiY29tbWVudFRpdGxlIiwidXNlck5hbWUiLCJjb2xsZWN0Iiwic2hvd0xvZ2luRGlhbG9nIiwic2hvd0luc3RydWN0aW9uUGhvdG8iLCJwaG90b1VybCIsInRlbXBsYXRlIiwicGhvdG8iLCJuZXdDb21tZW50IiwiJGluamVjdCIsIiR0aW1lb3V0IiwicGhvdG9EaWFsb2dDb250cm9sbGVyIiwibmV3UGhvdG8iLCJpbnN0cnVjdGlvbkRpYWxvZ0NvbnRyb2xsZXIiLCJuZXdJbnN0cnVjdGlvbiIsInRleHQiLCJkaWZmaWN1bHRpZXMiLCJnZXREaWZmaWN1bHRpZXMiLCJzYXZlRGlzaCIsInVwZGF0ZSIsInVwZGF0ZVN1Y2Nlc3MiLCJyZW1vdmVJbnN0cnVjdGlvbiIsImluc3RydWN0aW9ucyIsInJlbW92ZVBob3RvIiwicGhvdG9zIiwic2hvd0FkZFBob3RvRGlhbG9nIiwic2hvd0FkZEluc3RydWN0aW9uRGlhbG9nIiwiYWRkSW5zdHJ1Y3Rpb24iLCIkbWRNZWRpYSIsInJlY2lwZVRpbGVzIiwiJHdhdGNoIiwiaXNTbWFsbCIsInNtYWxsU2NyZWVuIiwiYnVpbGRHcmlkIiwibGltaXQiLCJmb3JFYWNoIiwidGlsZSIsImltYWdlIiwiaW1hZ2VVcmwiLCJwcmVwVGltZSIsInRvdGFsVGltZSIsImRpZmZpY3VsdHkiLCJzcGFuIiwicm93IiwiY29sIiwiJGh0dHAiLCJTZXNzaW9uU2VydmljZSIsImxvZ2luQ29udHJvbGxlciIsImRpYWxvZ1RpdGxlIiwibWQ1IiwiYWZ0ZXJBdXRoIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJzZXRMb2NhbCIsImVtYWlsIiwicGFzc3dvcmQiLCJmYkxvZ2luIiwibG9naW4iLCJyZXNwb25zZSIsInN0YXR1cyIsImFwaSIsImZiVXNlciIsImxpbmtlZFNvY2lhbCIsInNvY2lhbExvZ2luIiwibG9naW5UeXBlIiwic2lnblVwIiwibmV3VXNlciIsImNyZWF0ZUhhc2giLCJzaG93TW9iaWxlTWVudSIsImxvZ2luZWRUb2tlbiIsImdldExvY2FsIiwidG9nZ2xlTW9iaWxlTWVudSIsImV2IiwicG9zdExvZ2luIiwicHJvbWlzZSIsInJvbGUiLCJsb2dvdXQiLCJkaXJlY3RpdmUiLCJyZXF1aXJlIiwicmVzdHJpY3QiLCJsaW5rIiwiYXR0cmlidXRzIiwibmdNb2RlbCIsIiRyZW5kZXIiLCJodG1sIiwiJHZpZXdWYWx1ZSIsImJpbmQiLCIkYXBwbHkiLCIkc2V0Vmlld1ZhbHVlIiwidHJhbnNjbHVkZSIsImZvY3VzVmFsdWUiLCIkZWxlbWVudCIsImN1cnJlbnRWYWx1ZSIsInByZXZpb3VzVmFsdWUiLCJmb2N1cyIsIiRhdHRycyIsIiRsYXN0IiwiJGVtaXQiLCJmYWN0b3J5IiwiZGlzaEZhY3RvcnkiLCJudW0iLCJtZXRob2QiLCJ1cmwiLCJwYXJhbXMiLCJ0YWdzW10iLCJwb3N0IiwicHV0IiwiaW5zdHJ1Y3Rpb24iLCJpbnN0cnVjdGlvbl9pZCIsInNlc3Npb25GYWN0b3J5Iiwia2V5IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImZyb21Kc29uIiwic2V0SXRlbSIsInRvSnNvbiIsInNvY2lhbEZhY3RvcnkiLCJ1aSIsImhyZWYiLCJ1c2VyRmFjdG9yeSIsInNvY2lhbFVzZXIiLCJzZWFyY2hCeSIsInVzZXJzIiwiaW5kZXhPZiIsInJlbW92ZUl0ZW0iLCJsb2dpbmVkVXNlciIsInF1ZXJ5IiwiZ2V0QnlJZCIsInVzZXJfaWQiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLGNBQUEsVUFBQSxjQUFBLGFBQUEsWUFBQSxlQUNBQyxTQUFBLGFBQ0FDLFVBQUEsZ0JBQ0FDLFNBQUEsS0FDQUMsTUFBQSxRQUNBQyxZQUFBLFdBQ0FDLGtCQUFBLGlCQUNBQyxhQUFBLEtDUEFSLFFBQUFDLE9B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LEVBQUFRLFFBQUEsU0FBQUMsR0FDQSxNQUFBckYsR0FBQTlGLElBQUEsY0FBQW1MLEdBQUFwTixLQUFBLFNBQUE4SSxHQUNBLE1BQUFBLEdBQUE3SCxRQUtBMEwsRUFBQWxMLE9BQUEsU0FBQXdELEdBQ0EsTUFBQThDLEdBQUE4RCxLQUFBLGNBQUE1RyxHQUFBakYsS0FBQSxXQUNBLE1BQUEyTSxHQUFBOUQsTUFBQTVELEVBQUF5RCxNQUFBekQsRUFBQTBELGFBS0FnRSxFQUFBdEcsT0FBQSxTQUFBK0csRUFBQW5JLEdBQ0EsTUFBQThDLEdBQUErRCxJQUFBLGNBQUFzQixFQUFBbkksR0FBQWpGLEtBQUEsU0FBQThJLEdBQ0EsTUFBQUEsR0FBQTdILFFBS0EwTCxFQUFBdkgsUUFBQSxTQUFBbEQsR0FDQSxNQUFBNkYsR0FBQStELElBQUEsY0FBQTVOLEVBQUFvRSxZQUFBaEIsSUFBQSxXQUFBWSxHQUFBbEMsS0FBQSxTQUFBOEksR0FDQSxNQUFBQSxHQUFBN0gsUUFLQTBMLEVBQUE3TSxVQUFBLFNBQUFDLEdBQ0EsTUFBQTRNLEdBQUExSyxNQUFBakMsS0FBQSxTQUFBaUYsR0FDQSxNQUFBQSxJQUFBbEYsRUFBQWdOLFFBQUE5SCxFQUFBOEUsT0FBQSxHQUNBLEdBRUEsR0FFQSxTQUFBakIsR0FDQSxPQUFBLEtBSUE2RCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScsIFsnbmdSb3V0ZScsICdhbmd1bGFyLW1kNScsICduZ01hdGVyaWFsJywgJ25nQW5pbWF0ZScsICduZ01lc3NhZ2VzJ10pXG4gICAgLmNvbnN0YW50KCdDT05TVEFOVFMnLCB7XG4gICAgICAgIFwiRkJfQVBQX0lEXCI6IDE1NjM1NjczODcyNTM0NjgsXG4gICAgICAgIFwiRkFDRUJPT0tcIjogXCJGQlwiLFxuICAgICAgICBcIkVNQUlMXCI6IFwiRU1BSUxcIixcbiAgICAgICAgXCJTT0NJQUxfUEFTU1wiOiBcIlBBU1NXT1JEXCIsXG4gICAgICAgIFwiTE9DQUxfU1RPUkFHRV9LRVlcIjogXCJzcGljeVRhc3RlVXNlclwiLFxuICAgICAgICBcIkxBVEVTVF9DT1VOVFwiOiAxMFxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5jb25maWcoZnVuY3Rpb24oJG1kVGhlbWluZ1Byb3ZpZGVyLCAkbWRJY29uUHJvdmlkZXIpIHtcblxuICAgICAgICB2YXIgcHJpbWFyeU9yYW5nZSA9ICRtZFRoZW1pbmdQcm92aWRlci5leHRlbmRQYWxldHRlKCdkZWVwLW9yYW5nZScsIHtcbiAgICAgICAgICAgICc1MDAnOiAnZjI3MjQyJ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgcHJpbWFyeUJsdWUgPSAkbWRUaGVtaW5nUHJvdmlkZXIuZXh0ZW5kUGFsZXR0ZSgnYmx1ZScsIHtcbiAgICAgICAgICAgICc1MDAnOiAnNjk4NGI0JyxcbiAgICAgICAgICAgICc2MDAnOiAnNjk4NGI0J1xuICAgICAgICB9KTtcblxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeU9yYW5nZScsIHByaW1hcnlPcmFuZ2UpO1xuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgncHJpbWFyeUJsdWUnLCBwcmltYXJ5Qmx1ZSk7XG5cbiAgICAgICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgncHJpbWFyeU9yYW5nZScpXG4gICAgICAgICAgICAuYWNjZW50UGFsZXR0ZSgnbGlnaHQtZ3JlZW4nKTtcblxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2JsdWUnKVxuICAgICAgICAgICAgLnByaW1hcnlQYWxldHRlKCdwcmltYXJ5Qmx1ZScpO1xuXG4gICAgICAgICRtZEljb25Qcm92aWRlci5pY29uKCdtZW51JywgJ3N2Zy9pY19tZW51XzI0cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdzaGFyZScsICdzdmcvaWNfc2hhcmVfNDhweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2xvZ2luJywgJ3N2Zy9pY19hY2NvdW50X2NpcmNsZV8yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbigncmVjaXBlcycsICdzdmcvaWNfZXZlbnRfbm90ZV80OHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbigncmVzdGF1cmFudHMnLCAnc3ZnL2ljX3Jlc3RhdXJhbnRfbWVudV80OHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignaW5ncmVkaWVudHMnLCAnc3ZnL2ljX3JlY2VpcHRfNDhweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2Fycm93JywgJ3N2Zy9pY19hcnJvd19kcm9wX3VwXzQ4cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdtb3JlJywgJ3N2Zy9pY19tb3JlXzI0cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCd0aW1lMScsICdzdmcvaWNfYXZfdGltZXJfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3RpbWUyJywgJ3N2Zy9pY19hY2Nlc3NfdGltZV8yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignZGlmZmljdWx0eScsICdzdmcvaWNfdHJhY2tfY2hhbmdlc18yNHB4LnN2ZycpXG4gICAgICAgICAgICAuaWNvbignZXhpdCcsICdzdmcvaWNfZXhpdF90b19hcHBfNDhweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3Bob3RvJywgJ3N2Zy9pY19tbXNfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2NoZWNrJywgJ3N2Zy9pY19jaGVja19jaXJjbGVfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2ZhY2Vib29rJywgJ3N2Zy9mYWNlYm9vay5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ3R3aXR0ZXInLCAnc3ZnL3R3aXR0ZXIuc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdwaW50ZXJlc3QnLCAnc3ZnL3BpbnRlcmVzdC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2NvbW1lbnRzJywgJ3N2Zy9pY19jaGF0XzQ4cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdtZW51JywgJ3N2Zy9pY19tZW51XzQ4cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdmYXZvcml0ZScsICdzdmcvaWNfZmF2b3JpdGVfMjRweC5zdmcnKVxuICAgICAgICAgICAgLmljb24oJ2RlbGV0ZScsICdzdmcvaWNfZGVsZXRlXzQ4cHguc3ZnJylcbiAgICAgICAgICAgIC5pY29uKCdhZGQnLCAnc3ZnL2ljX2FkZF9jaXJjbGVfb3V0bGluZV80OHB4LnN2ZycpO1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkd2luZG93LCBDT05TVEFOVFMsIFVzZXJTZXJ2aWNlKSB7XG4gICAgICAgICR3aW5kb3cuZmJBc3luY0luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIEZCLmluaXQoe1xuICAgICAgICAgICAgICAgIGFwcElkOiBDT05TVEFOVFMuRkJfQVBQX0lELFxuICAgICAgICAgICAgICAgIGNvb2tpZTogdHJ1ZSwgLy8gZW5hYmxlIGNvb2tpZXMgdG8gYWxsb3cgdGhlIHNlcnZlciB0byBhY2Nlc3MgdGhlIHNlc3Npb25cbiAgICAgICAgICAgICAgICB4ZmJtbDogdHJ1ZSwgLy8gcGFyc2Ugc29jaWFsIHBsdWdpbnMgb24gdGhpcyBwYWdlXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogJ3YyLjInIC8vIHVzZSB2ZXJzaW9uIDIuMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTG9hZCB0aGUgU0RLIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIChmdW5jdGlvbihkLCBzLCBpZCkge1xuICAgICAgICAgICAgdmFyIGpzLCBmanMgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKHMpWzBdO1xuICAgICAgICAgICAgaWYgKGQuZ2V0RWxlbWVudEJ5SWQoaWQpKSByZXR1cm47XG4gICAgICAgICAgICBqcyA9IGQuY3JlYXRlRWxlbWVudChzKTtcbiAgICAgICAgICAgIGpzLmlkID0gaWQ7XG4gICAgICAgICAgICBqcy5zcmMgPSBcIi8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvc2RrLmpzXCI7XG4gICAgICAgICAgICBmanMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoanMsIGZqcyk7XG4gICAgICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCAnZmFjZWJvb2stanNzZGsnKSk7XG5cbiAgICAgICAgLy9DaGVjayBBdXRob3JpemF0aW9uXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uKGV2ZW50LCBuZXh0KXtcbiAgICAgICAgICAgIGlmKG5leHQuYWNjZXNzKXtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5hdXRob3JpemUobmV4dC5hY2Nlc3MucmVxdWlyZVBlcm1pc3Npb25zKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFyZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnbm90LWF1dGhvcml6ZScpLnJlcGxhY2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuY29uZmlnKGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyLCAkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgLy9ob21lIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvaG9tZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2hvbWUnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy9zaG93IGFsbCBkaXNoZXMgcGFnZVxuICAgICAgICAgICAgLndoZW4oJy9kaXNoZXMnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy9kaXNoL2FsbC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGlzaExpc3RDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdkaXNoTGlzdCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL3Nob3cgZGlzaCBkZXRhaWwgcGFnZVxuICAgICAgICAgICAgLndoZW4oJy9kaXNoZXMvOmRpc2hfaWQnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy9kaXNoL2RldGFpbC5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnRGlzaERldGFpbENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2Rpc2hEZXRhaWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy9saXN0IGFkbWluIGRpc2ggcGFnZVxuICAgICAgICAgICAgLndoZW4oJy9hZG1pbi9kaXNoZXMnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy9hZG1pbi9kaXNoL2xpc3QuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hMaXN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaExpc3QnLFxuICAgICAgICAgICAgICAgIGFjY2Vzczoge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlUGVybWlzc2lvbnM6IFsnQWRtaW4nXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvL2VkaXQgYSBkaXNoIHBhZ2VcbiAgICAgICAgICAgIC53aGVuKCcvYWRtaW4vZGlzaGVzLzpkaXNoX2lkJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvYWRtaW4vZGlzaC9zaW5nbGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rpc2hFZGl0Q29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGlzaE1hbmFnZScsXG4gICAgICAgICAgICAgICAgYWNjZXNzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVQZXJtaXNzaW9uczogWydBZG1pbiddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC8vbG9naW4gdXNlclxuICAgICAgICAgICAgLndoZW4oJy9sb2dpbicsIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25nL3ZpZXdzL3BhZ2VzL3VzZXIvbG9naW4uaHRtbCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbG9naW4nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLy91c2VyIHByb2ZpbGVcbiAgICAgICAgICAgIC53aGVuKCcvbWUnLCB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9wYWdlcy91c2VyL21lLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQcm9maWxlQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnbWUnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9ub3QtYXV0aG9yaXplJywge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvcGFnZXMvbm90LWF1dGhvcml6ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAvL2NvbnRyb2xsZXIgYXBwbGllZCB0byBkaXNoIGxpc3QgcGFnZVxuICAgIC5jb250cm9sbGVyKCdEaXNoTGlzdENvbnRyb2xsZXInLCBmdW5jdGlvbihEaXNoU2VydmljZSwgU29jaWFsU2VydmljZSwgJGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgLy9ncmFiIGFsbCB0aGUgZGlzaGVzIGF0IHBhZ2UgbG9hZFxuICAgICAgICBEaXNoU2VydmljZS5hbGwoKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIC8vYmluZCB0aGUgZGlzaGVzXG4gICAgICAgICAgICB2bS5kaXNoZXMgPSBkYXRhO1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2Z1bmN0aW9uIHRvIGRlbGV0ZSBhIGRpc2hcbiAgICAgICAgdm0uZGVsZXRlRGlzaCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgZGlzaCA9IHZtLmRpc2hlc1tpbmRleF07XG4gICAgICAgICAgICBEaXNoU2VydmljZS5kZWxldGUoZGlzaC5faWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZtLmRpc2hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0uYWRkRGlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgRGlzaFNlcnZpY2UuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbmV3IGRpc2gnXG4gICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FkbWluL2Rpc2hlcy8nICsgZGF0YS5kaXNoLl9pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLmdvVG9FZGl0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYWRtaW4vZGlzaGVzLycgKyBpZCk7XG4gICAgICAgIH1cblxuICAgIH0pXG4gICAgLy9jb250cm9sbGVyIGFwcGxpZWQgdG8gZGlzaCBkZXRhaWwgcGFnZVxuICAgIC5jb250cm9sbGVyKCdEaXNoRGV0YWlsQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMsICRmaWx0ZXIsICRtZERpYWxvZywgRGlzaFNlcnZpY2UsIFVzZXJTZXJ2aWNlLCBTb2NpYWxTZXJ2aWNlKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmRpc2ggPSB7fTtcbiAgICAgICAgaW5pdCgpO1xuXG4gICAgICAgIHZtLmVudGVyRmxpcEJvb2sgPSBmdW5jdGlvbihldm4pIHtcbiAgICAgICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgICAgICB0YXJnZXRFdmVudDogZXZuLFxuICAgICAgICAgICAgICAgIGNsaWNrT3V0c2lkZVRvQ2xvc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy9kaWFsb2dzL2ZsaXBib29rLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEaXNoRGV0YWlsQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYm9vaydcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaG93bkJvb2sgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnNob3duQm9vayA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9jYWxsIGJvb2tsZXQgcGx1Z2luXG4gICAgICAgICRzY29wZS4kb24oJ29uUmVwZWF0TGFzdCcsIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpLnBhcmVudHMoJyNkaXNoQm9vaycpLmJvb2tsZXQoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgY2xvc2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGF1dG9DZW50ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFnZU51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhZ2VQYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIGhvdmVyV2lkdGg6IDEwMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZtLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5mYlNoYXJlID0gZnVuY3Rpb24oZGlzaCkge1xuICAgICAgICAgICAgdmFyIGRpc2hMaW5rID0gJGxvY2F0aW9uLmFic1VybCgpICsgJy8nICsgZGlzaC5faWQ7XG4gICAgICAgICAgICBTb2NpYWxTZXJ2aWNlLmZiU2hhcmUoZGlzaExpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0ucmVwbHkgPSBmdW5jdGlvbih1c2VyLCAkZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBjb21tZW50VGl0bGUgPSAnQCcgKyB1c2VyLnVzZXJOYW1lO1xuICAgICAgICAgICAgb3BlbkNvbW1lbnREaWFsb2coY29tbWVudFRpdGxlLCAkZXZlbnQsIHVzZXIuX2lkKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2bS5jb2xsZWN0ID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoISRyb290U2NvcGUuY3VycmVudFVzZXIpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xvZ2luRGlhbG9nKCRldmVudCwgdHJ1ZSwgJ0xvZ2luL1NpZ25VcCBmaXJzdCB0byBzYXZlIGFzIGZhdm9yaXRlJykudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuXG4gICAgICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNvbGxlY3Qodm0uZGlzaC5faWQpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmRpc2guaXNDb2xsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5jb2xsZWN0KHZtLmRpc2guX2lkKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdm0uZGlzaC5pc0NvbGxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnNob3dJbnN0cnVjdGlvblBob3RvID0gZnVuY3Rpb24ocGhvdG9VcmwsICRldmVudCkge1xuICAgICAgICAgICAgaWYgKHBob3RvVXJsID09IG51bGwgfHwgcGhvdG9VcmwudHJpbSgpID09ICcnKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiAkZXZlbnQsXG4gICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxtZC1kaWFsb2c+JyArXG4gICAgICAgICAgICAgICAgICAgICc8bWQtZGlhbG9nLWNvbnRlbnQ+PGltZyBzcmM9XCJ7e3Bob3RvfX1cIj48L21kLWRpYWxvZy1jb250ZW50PicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9tZC1kaWFsb2c+JyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiBEaWFsb2dDdHIoJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5waG90byA9IHBob3RvVXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdm0ubmV3Q29tbWVudCA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLmN1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMb2dpbkRpYWxvZygkZXZlbnQsIHRydWUsICdMb2dpbi9TaWduVXAgZmlyc3QgdG8gbGVhdmUgYSBjb21tZW50JykudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgICAgICAgICBvcGVuQ29tbWVudERpYWxvZygnQ29tbWVudCcsICRldmVudCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3BlbkNvbW1lbnREaWFsb2coJ0NvbW1lbnQnLCAkZXZlbnQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHZtLmRpc2ggPSB7fTtcbiAgICAgICAgICAgIHZtLnJlbGF0ZWREaXNoZXMgPSB7fTtcblxuICAgICAgICAgICAgLy9nZXQgdGhlIGRpc2ggYnkgaWRcbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLmdldCgkcm91dGVQYXJhbXMuZGlzaF9pZCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0uZGlzaCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdm0uZGlzaC5pc0NvbGxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy9nZXQgdGhlIDMgcmVsYXRlZCBkaXNoZXNcbiAgICAgICAgICAgICAgICBEaXNoU2VydmljZS5yZWxhdGUodm0uZGlzaC5faWQsIHZtLmRpc2gudGFncywgMykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZtLnJlbGF0ZWREaXNoZXMgPSBkYXRhO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5jdXJyZW50VXNlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSAkZmlsdGVyKCdmaWx0ZXInKSgkcm9vdFNjb3BlLmN1cnJlbnRVc2VyLmZhdm91cml0ZURpc2hlcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2lkOiB2bS5kaXNoLl9pZFxuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5kaXNoLmlzQ29sbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvcGVuQ29tbWVudERpYWxvZyh0aXRsZSwgJGV2ZW50LCByZXBseVRvKSB7XG4gICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0RXZlbnQ6ICRldmVudCxcbiAgICAgICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvZGlhbG9ncy9jb21tZW50Lmh0bWwnLFxuICAgICAgICAgICAgICAgIGxvY2Fsczoge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbW1lbnRDb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2NvbW1lbnQnXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBEaXNoU2VydmljZS5hZGRDb21tZW50KHZtLmRpc2guX2lkLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlcGx5VG86IHJlcGx5VG9cbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKGNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0uZGlzaC5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb21tZW50Q29udHJvbGxlcih0aXRsZSwgJG1kRGlhbG9nKSB7XG4gICAgICAgICAgICB2YXIgZHZtID0gdGhpcztcbiAgICAgICAgICAgIGR2bS5jb250ZW50ID0gJyc7XG4gICAgICAgICAgICBkdm0udGl0bGUgPSB0aXRsZTtcblxuICAgICAgICAgICAgZHZtLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKGR2bS5jb250ZW50LnRyaW0oKSA9PSAnJylcbiAgICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZShkdm0uY29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vY29udHJvbGxlciBhcHBsaWVkIHRvIGRpc2ggZWRpdCBwYWdlXG4gICAgLmNvbnRyb2xsZXIoJ0Rpc2hFZGl0Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRtZERpYWxvZywgJHJvdXRlUGFyYW1zLCBEaXNoU2VydmljZSwgJGxvY2F0aW9uLCAkdGltZW91dCkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgdm0uc2F2ZURpc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLnVwZGF0ZSgkcm91dGVQYXJhbXMuZGlzaF9pZCwgdm0uZGlzaCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0udXBkYXRlU3VjY2VzcyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdm0udXBkYXRlU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnJlbW92ZUluc3RydWN0aW9uID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIERpc2hTZXJ2aWNlLnJlbW92ZUluc3RydWN0aW9uKCRyb3V0ZVBhcmFtcy5kaXNoX2lkLCB2bS5kaXNoLmluc3RydWN0aW9uc1tpbmRleF0uX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2bS5kaXNoLmluc3RydWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5yZW1vdmVQaG90byA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgICB2bS5kaXNoLnBob3Rvcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgdm0uc2F2ZURpc2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnNob3dBZGRQaG90b0RpYWxvZyA9IGZ1bmN0aW9uKGV2bikge1xuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldm4sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogcGhvdG9EaWFsb2dDb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Bob3RvRGxnJyxcbiAgICAgICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvZGlhbG9ncy9hZGRQaG90by5odG1sJ1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihuZXdQaG90bykge1xuICAgICAgICAgICAgICAgIHZtLmRpc2gucGhvdG9zLnB1c2gobmV3UGhvdG8pO1xuICAgICAgICAgICAgICAgIHZtLnNhdmVEaXNoKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZtLnNob3dBZGRJbnN0cnVjdGlvbkRpYWxvZyA9IGZ1bmN0aW9uKGV2bikge1xuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coe1xuICAgICAgICAgICAgICAgIHRhcmdldEV2ZW50OiBldm4sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogaW5zdHJ1Y3Rpb25EaWFsb2dDb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2luc3RydWN0aW9uRGxnJyxcbiAgICAgICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvZGlhbG9ncy9hZGRJbnN0cnVjdGlvbi5odG1sJ1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihuZXdJbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZtLmRpc2guaW5zdHJ1Y3Rpb25zLnB1c2gobmV3SW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgICAgIERpc2hTZXJ2aWNlLmFkZEluc3RydWN0aW9uKCRyb3V0ZVBhcmFtcy5kaXNoX2lkLCBuZXdJbnN0cnVjdGlvbikuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGhvdG9EaWFsb2dDb250cm9sbGVyKCRtZERpYWxvZykge1xuICAgICAgICAgICAgdmFyIGR2bSA9IHRoaXM7XG4gICAgICAgICAgICBkdm0ubmV3UGhvdG8gPSAnJztcblxuICAgICAgICAgICAgZHZtLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdm0uc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJG1kRGlhbG9nLmhpZGUoZHZtLm5ld1Bob3RvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc3RydWN0aW9uRGlhbG9nQ29udHJvbGxlcigkbWREaWFsb2cpIHtcbiAgICAgICAgICAgIHZhciBkdm0gPSB0aGlzO1xuXG4gICAgICAgICAgICBkdm0ubmV3SW5zdHJ1Y3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgcGhvdG86ICcnLFxuICAgICAgICAgICAgICAgIHRleHQ6ICcnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkdm0uY2xvc2VEaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR2bS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZShkdm0ubmV3SW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIC8vZ2V0IHRoZSBkaXNoIGJ5IGlkXG4gICAgICAgICAgICBEaXNoU2VydmljZS5nZXQoJHJvdXRlUGFyYW1zLmRpc2hfaWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZtLmRpc2ggPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2bS5kaWZmaWN1bHRpZXMgPSBEaXNoU2VydmljZS5nZXREaWZmaWN1bHRpZXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuIixudWxsLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ0hvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWRNZWRpYSwgRGlzaFNlcnZpY2UsIENPTlNUQU5UUykge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHZtLnJlY2lwZVRpbGVzID0gW107XG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAkbWRNZWRpYSgnc20nKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGlzU21hbGwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc21hbGxTY3JlZW4gPSBpc1NtYWxsO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJ1aWxkR3JpZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRHcmlkKCkge1xuICAgICAgICAgICAgRGlzaFNlcnZpY2UubGltaXQoQ09OU1RBTlRTLkxBVEVTVF9DT1VOVCkuc3VjY2VzcyhmdW5jdGlvbihkaXNoZXMpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGlzaGVzLCBmdW5jdGlvbihkaXNoLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBkaXNoLmltYWdlVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRpc2gubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkaXNoLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXBUaW1lOiBkaXNoLnByZXBUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxUaW1lOiBkaXNoLnRvdGFsVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHk6IGRpc2guZGlmZmljdWx0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IGRpc2gudGFncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbmRleCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlLnNwYW4ucm93ID0gdGlsZS5zcGFuLmNvbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS5zcGFuLmNvbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS5zcGFuLnJvdyA9IHRpbGUuc3Bhbi5jb2wgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlLnNwYW4uY29sID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZtLnJlY2lwZVRpbGVzLnB1c2godGlsZSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgJG1kRGlhbG9nLCAkaHR0cCwgU2Vzc2lvblNlcnZpY2UsIFVzZXJTZXJ2aWNlLCBDT05TVEFOVFMpIHtcbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgaW5pdCgpO1xuXG4gICAgICAgIHZtLnRvZ2dsZU1vYmlsZU1lbnUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZtLnNob3dNb2JpbGVNZW51ID0gIXZtLnNob3dNb2JpbGVNZW51O1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLnNob3dMb2dpbkRpYWxvZyA9IGZ1bmN0aW9uKGV2LCBwb3N0TG9naW4sIHRpdGxlKSB7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbmcvdmlld3MvZGlhbG9ncy9sb2dpbi5odG1sJyxcbiAgICAgICAgICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogbG9naW5Db250cm9sbGVyLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xvZ2luJyxcbiAgICAgICAgICAgICAgICBsb2NhbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nVGl0bGU6IHRpdGxlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocG9zdExvZ2luKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXNlci5yb2xlICYmIHVzZXIucm9sZSA9PSBcIkFkbWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYWRtaW4vZGlzaGVzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKGRpYWxvZ1RpdGxlLCAkbWREaWFsb2csIFVzZXJTZXJ2aWNlLCBtZDUpIHtcbiAgICAgICAgICAgIHZhciBkdm0gPSB0aGlzO1xuICAgICAgICAgICAgZHZtLnRpdGxlID0gZGlhbG9nVGl0bGU7XG4gICAgICAgICAgICBkdm0uZW1haWwgPSBcIlwiO1xuICAgICAgICAgICAgZHZtLnBhc3N3b3JkID0gXCJcIjtcbiAgICAgICAgICAgIGR2bS51c2VyTmFtZSA9IFwiXCI7XG5cbiAgICAgICAgICAgIGR2bS5mYkxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgRkIubG9naW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIExvZ2dlZCBpbnRvIHlvdXIgYXBwIGFuZCBGYWNlYm9vay5cbiAgICAgICAgICAgICAgICAgICAgICAgIEZCLmFwaSgnL21lJywgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmJVc2VyID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyTmFtZTogcmVzcG9uc2UubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHJlc3BvbnNlLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogQ09OU1RBTlRTLlNPQ0lBTF9QQVNTLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b1VybDogJ2h0dHA6Ly9ncmFwaC5mYWNlYm9vay5jb20vJyArIHJlc3BvbnNlLmlkICsgJy9waWN0dXJlP3R5cGU9bGFyZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rZWRTb2NpYWw6IENPTlNUQU5UUy5GQUNFQk9PS1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5zb2NpYWxMb2dpbihmYlVzZXIpLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmxvZ2luVHlwZSA9IENPTlNUQU5UUy5GQUNFQk9PSztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJBdXRoKHVzZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gJ25vdF9hdXRob3JpemVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHBlcnNvbiBpcyBsb2dnZWQgaW50byBGYWNlYm9vaywgYnV0IG5vdCB5b3VyIGFwcC5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBwZXJzb24gaXMgbm90IGxvZ2dlZCBpbnRvIEZhY2Vib29rLCBzbyB3ZSdyZSBub3Qgc3VyZSBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhleSBhcmUgbG9nZ2VkIGludG8gdGhpcyBhcHAgb3Igbm90LlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBzY29wZTogJ3B1YmxpY19wcm9maWxlLGVtYWlsJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdm0ubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5sb2dpbihkdm0uZW1haWwsIGR2bS5wYXNzd29yZCkudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXIubG9naW5UeXBlID0gQ09OU1RBTlRTLkVNQUlMO1xuICAgICAgICAgICAgICAgICAgICBhZnRlckF1dGgodXNlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGR2bS5zaWduVXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3VXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IGR2bS51c2VyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGR2bS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGR2bS5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgcGhvdG9Vcmw6ICdodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvJyArIG1kNS5jcmVhdGVIYXNoKGR2bS5lbWFpbCksXG4gICAgICAgICAgICAgICAgICAgIGxpbmtlZFNvY2lhbDogQ09OU1RBTlRTLkVNQUlMXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNyZWF0ZShuZXdVc2VyKS50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlci5sb2dpblR5cGUgPSBDT05TVEFOVFMuRU1BSUw7XG4gICAgICAgICAgICAgICAgICAgIGFmdGVyQXV0aCh1c2VyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZnRlckF1dGgodXNlcikge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9ICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXTtcbiAgICAgICAgICAgICAgICBTZXNzaW9uU2VydmljZS5zZXRMb2NhbChDT05TVEFOVFMuTE9DQUxfU1RPUkFHRV9LRVksIHRva2VuKTtcbiAgICAgICAgICAgICAgICAkbWREaWFsb2cuaGlkZSh1c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICB2bS5zaG93TW9iaWxlTWVudSA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGxvZ2luZWRUb2tlbiA9IFNlc3Npb25TZXJ2aWNlLmdldExvY2FsKENPTlNUQU5UUy5MT0NBTF9TVE9SQUdFX0tFWSk7XG4gICAgICAgICAgICBpZiAobG9naW5lZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gbG9naW5lZFRva2VuO1xuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmdldCgpLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmNvbnRyb2xsZXIoJ1Byb2ZpbGVDb250cm9sbGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCBVc2VyU2VydmljZSkge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgdm0ubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuY3VycmVudFVzZXIgPSBudWxsO1xuICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgdm0udXNlciA9IHt9O1xuICAgICAgICAgICAgVXNlclNlcnZpY2UuZ2V0KCkudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgdm0udXNlciA9IHVzZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmRpcmVjdGl2ZSgnY29udGVudGVkaXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0cywgbmdNb2RlbCkge1xuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmh0bWwoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3NwaWN5VGFzdGUnKVxuICAgIC5kaXJlY3RpdmUoJ2ZsaXBib29rJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFuc2NsdWRlOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICduZy92aWV3cy90ZW1wbGF0ZXMvZmxpcGJvb2suaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGRpc2g6ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuZGlyZWN0aXZlKCdmb2N1c09uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBmb2N1c1ZhbHVlOiBcIj1mb2N1c09uXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnZm9jdXNWYWx1ZScsIGZ1bmN0aW9uKGN1cnJlbnRWYWx1ZSwgcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlICYmICFwcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZWxlbWVudFswXS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmRpcmVjdGl2ZSgnb25MYXN0UmVwZWF0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgICAgICAgaWYgKCRzY29wZS4kbGFzdCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ29uUmVwZWF0TGFzdCcsICRlbGVtZW50LCAkYXR0cnMpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmZhY3RvcnkoJ0Rpc2hTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHApIHtcblxuICAgICAgICAvL2NyZWF0ZSBhIG5ldyBvYmplY3RcbiAgICAgICAgdmFyIGRpc2hGYWN0b3J5ID0ge307XG5cbiAgICAgICAgLy9nZXQgYWxsIGRpc2hlc1xuICAgICAgICBkaXNoRmFjdG9yeS5hbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvZGlzaGVzJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9nZXQgbGltaXRlZCBsYXRlc3QgZGlzaGVzXG4gICAgICAgIGRpc2hGYWN0b3J5LmxpbWl0ID0gZnVuY3Rpb24obnVtKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2Rpc2hlcz9saW1pdD0nICsgbnVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZ2V0IHJlbGF0ZWQgZGlzaGVzIGJ5IHRhZ3NcbiAgICAgICAgZGlzaEZhY3RvcnkucmVsYXRlID0gZnVuY3Rpb24oaWQsIHRhZ3MsIG51bSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIHVybDogJy9hcGkvZGlzaGVzJyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgICAgICBsaW1pdDogbnVtLFxuICAgICAgICAgICAgICAgICAgICAndGFnc1tdJzogdGFnc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jcmVhdGUgYSBkaXNoXG4gICAgICAgIGRpc2hGYWN0b3J5LmNyZWF0ZSA9IGZ1bmN0aW9uKGRpc2gpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Rpc2hlcycsIGRpc2gpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vZ2V0IGEgc2luZ2xlIGRpc2hcbiAgICAgICAgZGlzaEZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oZGlzaF9pZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9kaXNoZXMvJyArIGRpc2hfaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgYSBkaXNoXG4gICAgICAgIGRpc2hGYWN0b3J5LnVwZGF0ZSA9IGZ1bmN0aW9uKGRpc2hfaWQsIGRpc2gpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvZGlzaGVzLycgKyBkaXNoX2lkLCBkaXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZGVsZXRlIGEgZGlzaFxuICAgICAgICBkaXNoRmFjdG9yeS5kZWxldGUgPSBmdW5jdGlvbihkaXNoX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2FkZCBhIGNvbW1lbnRcbiAgICAgICAgZGlzaEZhY3RvcnkuYWRkQ29tbWVudCA9IGZ1bmN0aW9uKGRpc2hfaWQsIGNvbW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCArICcvY29tbWVudHMnLCBjb21tZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vYWRkIGEgaW5zdHJ1Y3Rpb25cbiAgICAgICAgZGlzaEZhY3RvcnkuYWRkSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihkaXNoX2lkLCBpbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvZGlzaGVzLycgKyBkaXNoX2lkICsgJy9pbnN0cnVjdGlvbnMnLCBpbnN0cnVjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvL3JlbW92ZSBhbiBpbnN0cnVjdGlvblxuICAgICAgICBkaXNoRmFjdG9yeS5yZW1vdmVJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKGRpc2hfaWQsIGluc3RydWN0aW9uX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL2Rpc2hlcy8nICsgZGlzaF9pZCArICcvaW5zdHJ1Y3Rpb25zLycgKyBpbnN0cnVjdGlvbl9pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCBkaWZmaWN1bHR5XG4gICAgICAgIGRpc2hGYWN0b3J5LmdldERpZmZpY3VsdGllcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFsn5Yid5a2mJywgJ+WuueaYkycsICfkuIDoiKwnLCAn6L6D6Zq+JywgJ+S4k+S4middO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXNoRmFjdG9yeTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdzcGljeVRhc3RlJylcbiAgICAuZmFjdG9yeSgnU2Vzc2lvblNlcnZpY2UnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgICAgIHZhciBzZXNzaW9uRmFjdG9yeSA9IHt9O1xuXG4gICAgICAgIHNlc3Npb25GYWN0b3J5LmdldExvY2FsID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoJHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICR3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLmZyb21Kc29uKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2Vzc2lvbkZhY3Rvcnkuc2V0TG9jYWwgPSBmdW5jdGlvbihrZXksIGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZSAmJiAkd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgYW5ndWxhci50b0pzb24oZGF0YSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlc3Npb25GYWN0b3J5O1xuXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmZhY3RvcnkoJ1NvY2lhbFNlcnZpY2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNvY2lhbEZhY3RvcnkgPSB7fTtcblxuICAgICAgICBzb2NpYWxGYWN0b3J5LmZiU2hhcmUgPSBmdW5jdGlvbihsaW5rKSB7XG4gICAgICAgICAgICBGQi51aSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnc2hhcmUnLFxuICAgICAgICAgICAgICAgIGhyZWY6IGxpbmssXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZSkge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNvY2lhbEZhY3Rvcnk7XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnc3BpY3lUYXN0ZScpXG4gICAgLmZhY3RvcnkoJ1VzZXJTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHAsICRyb290U2NvcGUsICR3aW5kb3csIENPTlNUQU5UUykge1xuICAgICAgICB2YXIgdXNlckZhY3RvcnkgPSB7fTtcblxuICAgICAgICAvL3NvY2lhbCBsb2dpblxuICAgICAgICB1c2VyRmFjdG9yeS5zb2NpYWxMb2dpbiA9IGZ1bmN0aW9uKHNvY2lhbFVzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5zZWFyY2hCeSgnZW1haWw9JyArIHNvY2lhbFVzZXIuZW1haWwpLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9ub3QgZm91bmQsIHRoZW4gY3JlYXRlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5jcmVhdGUoc29jaWFsVXNlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9mb3VuZCB0aGUgdXNlciB3aXRoIGVtYWlsXG4gICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBsaW5rZWQgc29jaWFsIGlmIG5vdCBhZGRlZFxuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IGRhdGEudXNlcnNbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyLmxpbmtlZFNvY2lhbC5pbmRleE9mKHNvY2lhbFVzZXIubGlua2VkU29jaWFsKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIubGlua2VkU29jaWFsLnB1c2goc29jaWFsVXNlci5saW5rZWRTb2NpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci51c2VyTmFtZSA9IHNvY2lhbFVzZXIudXNlck5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLnBob3RvVXJsID0gc29jaWFsVXNlci5waG90b1VybDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LnVwZGF0ZSh1c2VyKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyRmFjdG9yeS5sb2dpbih1c2VyLmVtYWlsLCBDT05TVEFOVFMuU09DSUFMX1BBU1MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkubG9naW4odXNlci5lbWFpbCwgQ09OU1RBTlRTLlNPQ0lBTF9QQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9sb2dpbiB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmxvZ2luID0gZnVuY3Rpb24oZW1haWwsIHBhc3N3b3JkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2F1dGgnLCB7XG4gICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LmdldCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbG9nb3V0IHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddO1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShDT05TVEFOVFMuTE9DQUxfU1RPUkFHRV9LRVkpO1xuICAgICAgICAgICAgdXNlckZhY3RvcnkubG9naW5lZFVzZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgY3VycmVudCB1c2VyXG4gICAgICAgIHVzZXJGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy9tZScpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zZWFyY2ggdXNlciBieSBmaWVsZFxuICAgICAgICB1c2VyRmFjdG9yeS5zZWFyY2hCeSA9IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzPycgKyBxdWVyeSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCB1c2VyIGJ5IGlkXG4gICAgICAgIHVzZXJGYWN0b3J5LmdldEJ5SWQgPSBmdW5jdGlvbih1c2VyX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB1c2VyX2lkKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY3JlYXRlIGEgbmV3IHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkuY3JlYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvJywgdXNlcikudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlckZhY3RvcnkubG9naW4odXNlci5lbWFpbCwgdXNlci5wYXNzd29yZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXBkYXRlIHVzZXJcbiAgICAgICAgdXNlckZhY3RvcnkudXBkYXRlID0gZnVuY3Rpb24odXNlcl9pZCwgdXNlcikge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnB1dCgnL2FwaS91c2Vycy8nICsgdXNlcl9pZCwgdXNlcikudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NvbGxlY3QgZGlzaCBhcyBmYXZvdXJpdGVcbiAgICAgICAgdXNlckZhY3RvcnkuY29sbGVjdCA9IGZ1bmN0aW9uKGRpc2hfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJy9hcGkvdXNlcnMvJyArICRyb290U2NvcGUuY3VycmVudFVzZXIuX2lkICsgJy9kaXNoZXMvJyArIGRpc2hfaWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9hdXRob3JpemUgdXNlclxuICAgICAgICB1c2VyRmFjdG9yeS5hdXRob3JpemUgPSBmdW5jdGlvbihyZXF1aXJlUGVybWlzc2lvbnMpe1xuICAgICAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5LmdldCgpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgICAgICAgICAgICAgICAgIGlmKHVzZXIgJiYgcmVxdWlyZVBlcm1pc3Npb25zLmluZGV4T2YodXNlci5yb2xlKSA+PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVzZXJGYWN0b3J5O1xuICAgIH0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9