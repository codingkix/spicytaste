angular.module("spicyTaste",["ngRoute","angular-md5"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD"}),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,o){e.user=null,n.fbAsyncInit=function(){FB.init({appId:o.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var o,i=e.getElementsByTagName(n)[0];e.getElementById(t)||(o=e.createElement(n),o.id=t,o.src="//connect.facebook.net/en_US/sdk.js",i.parentNode.insertBefore(o,i))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"detail"}).when("/admin/dishes/list",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/admin/dishes/create",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"})}]),angular.module("spicyTaste").controller("DishListController",["DishService",function(e){var n=this;n.processing=!0,e.all().success(function(e){n.processing=!1,n.dishes=e}),n.deleteDish=function(t){n.processing=!0,e["delete"](t).success(function(){e.all().success(function(e){n.processing=!1,n.dishes=e})})}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","DishService","UserService",function(e,n,t,o,i){function r(){e.focusOnComment=!1,s.newComment={content:"",replyTo:null},s.commentTitle="Comment"}var s=this;s.dish=null,r(),i.get(o.dish_id).success(function(e){s.dish=e}),s.addComment=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}i.addComment(s.dish._id,s.newComment).success(function(e){s.dish.comments.push(e)}),r()},s.reply=function(n){s.newComment.replyTo=n._id,s.commentTitle="@"+n.userName,e.focusOnComment=!0}}]).controller("DishCreateController",["DishService",function(e){function n(){t.type="create",t.dish={instructions:[]},t.newInstruction="",t.message="",t.processing=!1,t.dish.instructions.length=0}var t=this;n(),t.save=function(){t.processing=!0,e.create(t.dish).success(function(e){n(),t.message=e.message})},t.addInstruction=function(){t.dish.instructions.push(t.newInstruction),t.newInstruction=""},t.removeInstruction=function(e){t.dish.instructions.splice(e,1)}}]).controller("DishEditController",["$routeParams","DishService","$location",function(e,n){var t=this;t.type="edit",n.get(e.dish_id).success(function(e){t.dish=e}),t.save=function(){t.processing=!0,t.message="",n.update(e.dish_id,t.dish).success(function(e){t.processing=!1,t.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",function(){}),angular.module("spicyTaste").controller("LoginController",["$scope","UserService","$location","CONSTANTS","md5",function(e,n,t,o,i){var r=this;r.email="",r.password="",r.userName="",r.showSignUpForm=!1,r.fbLogin=function(){FB.login(function(t){"connected"===t.status?FB.api("/me",function(t){console.log("fb user: ",t);var i={userName:t.name,email:t.email,password:o.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+t.id+"/picture?type=large",linkedSocial:o.FACEBOOK};n.socialLogin(i).then(function(n){n.loginType=o.FACEBOOK,e.$emit("login",n)})}):"not_authorized"===t.status},{scope:"public_profile,email"})},r.login=function(){n.login(r.email,r.password).then(function(n){n.loginType=o.EMAIL,e.$emit("login",n)})},r.signUp=function(){var t={userName:r.userName,email:r.email,password:r.password,photoUrl:"http://www.gravatar.com/avatar/"+i.createHash(r.email),linkedSocial:o.EMAIL};n.create(t).then(function(n){e.$emit("login",n)})}}]),angular.module("spicyTaste").controller("MainController",["$scope","$rootScope","$location","UserService","CONSTANTS",function(e,n,t,o,i){var r=this;e.$on("login",function(e,o){n.user=r.currentUser=o;var i=t.search().returnUrl;i?t.path(i).search({returnUrl:null}):t.path("/")}),r.logout=function(){r.currentUser.loginType==i.FACEBOOK&&FB.logout(function(){}),r.currentUser=null,n.user=null,o.logout()}}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,n,t,o){o.$render=function(){n.html(o.$viewValue||"")},n.bind("blur",function(){e.$apply(function(){o.$setViewValue(n.html())})})}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,n){e.$watch("focusValue",function(e,t){e&&!t&&n[0].focus()})}}}),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n.addComment=function(n,t){return e.post("/api/dishes/"+n+"/comments",t)},n}]),angular.module("spicyTaste").factory("UserService",["$http","CONSTANTS",function(e,n){var t={};return t.socialLogin=function(e){return console.log("socialUser: ",e),t.searchBy("email="+e.email).then(function(o){if(o.success){var i=o.users[0];return i.linkedSocial.indexOf(e.linkedSocial)<0?(i.linkedSocial.push(e.linkedSocial),i.userName=e.userName,i.photoUrl=e.photoUrl,t.update(i).then(function(){return t.login(i.email,n.SOCIAL_PASS)})):t.login(i.email,n.SOCIAL_PASS)}return t.create(e)})},t.login=function(n,o){return e.post("/api/auth",{email:n,password:o}).then(function(n){return e.defaults.headers.common["X-Auth"]=n.data,t.get()})},t.logout=function(){delete e.defaults.headers.common["X-Auth"]},t.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},t.searchBy=function(n){return e.get("/api/users?"+n).then(function(e){return e.data})},t.getById=function(n){return e.get("/api/users/"+n).then(function(e){return e.data})},t.create=function(n){return e.post("/api/users/",n).then(function(){return t.login(n.email,n.password)})},t.update=function(n,t){return e.put("/api/users/"+n,t).then(function(e){return e.data})},t}]);
//# sourceMappingURL=data:application/json;base64,