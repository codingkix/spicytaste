angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD",LOCAL_STORAGE_KEY:"spicyTasteUser",LATEST_COUNT:10}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,n){var t=e.extendPalette("deep-orange",{500:"f27242"}),i=e.extendPalette("blue",{500:"6984b4",600:"6984b4"});e.definePalette("primaryOrange",t),e.definePalette("primaryBlue",i),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),e.theme("blue").primaryPalette("primaryBlue"),n.icon("menu","assets/svg/ic_menu_24px.svg").icon("share","assets/svg/ic_share_24px.svg").icon("login","assets/svg/ic_account_circle_24px.svg").icon("recipes","assets/svg/ic_event_note_48px.svg").icon("restaurants","assets/svg/ic_restaurant_menu_48px.svg").icon("ingredients","assets/svg/ic_receipt_48px.svg").icon("arrow","assets/svg/ic_arrow_drop_up_48px.svg").icon("more","assets/svg/ic_more_24px.svg").icon("time1","assets/svg/ic_av_timer_24px.svg").icon("time2","assets/svg/ic_access_time_24px.svg").icon("difficulty","assets/svg/ic_track_changes_24px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,i){e.user=null,n.fbAsyncInit=function(){FB.init({appId:i.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var i,o=e.getElementsByTagName(n)[0];e.getElementById(t)||(i=e.createElement(n),i.id=t,i.src="//connect.facebook.net/en_US/sdk.js",o.parentNode.insertBefore(i,o))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"detail"}).when("/admin/dishes/list",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/admin/dishes/create",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"})}]),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,n,t){var i=this;i.processing=!0,e.all().success(function(e){i.processing=!1,i.dishes=e}),i.deleteDish=function(n){i.processing=!0,e["delete"](n).success(function(n){e.all().success(function(e){i.processing=!1,i.dishes=e})})},i.addDish=function(){i.processing=!0,e.create({name:"new dish"}).success(function(e){t.path("/admin/dish/"+e.dish._id)})},i.fbShare=function(e){var i=t.absUrl()+"/"+e._id;n.fbShare(i)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","DishService","UserService",function(e,n,t,i,o,s){function r(){e.focusOnComment=!1,a.newComment={content:"",replyTo:null},a.commentTitle="Comment"}var a=this;a.dish={},r(),o.get(i.dish_id).success(function(e){a.dish=e,a.dish.isCollected=t.user&&t.user.favouriteDishes.indexOf(a.dish._id)>=0?!0:!1}),a.addComment=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}o.addComment(a.dish._id,a.newComment).success(function(e){a.dish.comments.push(e)}),r()},a.reply=function(n){a.newComment.replyTo=n._id,a.commentTitle="@"+n.userName,e.focusOnComment=!0},a.collect=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}s.collect(a.dish._id).then(function(e){console.log("UserService.collect:",e),e.success&&(a.dish.isCollected=!0)})}}]).controller("DishCreateController",["$location","DishService",function(e,n){var t=this;t.dish={name:"new dish"},t.save=function(){t.processing=!0,n.create(t.dish).success(function(n){e.path("/admin/dish/"+n.dish._id)})}}]).controller("DishEditController",["$routeParams","DishService","$location",function(e,n,t){function i(){o.newPhoto="",o.newInstruction="",o.message="",o.processing=!1}var o=this;i(),n.get(e.dish_id).success(function(e){o.dish=e}),o.addInstruction=function(){o.dish.instructions.push(o.newInstruction),o.newInstruction=""},o.removeInstruction=function(e){o.dish.instructions.splice(e,1)},o.addPhoto=function(){console.log("newPhoto: ",o.newPhoto),o.dish.photos.push(o.newPhoto),console.log("dish:",o.dish),o.newPhoto=""},o.removePhoto=function(e){o.dish.photos.splice(e,1)},o.save=function(){o.processing=!0,n.update(e.dish_id,o.dish).success(function(e){i(),o.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",["DishService","CONSTANTS",function(e,n){function t(){o.recipeTiles=[],i()}function i(){e.limit(n.LATEST_COUNT).success(function(e){angular.forEach(e,function(e,n){var t={image:e.imageUrl,title:e.name,id:e._id,prepTime:e.prepTime,totalTime:e.totalTime,difficulty:e.difficulty,ingredients:e.ingredients,span:{row:1,col:1}};switch(n+1){case 1:t.span.row=t.span.col=2;break;case 2:case 3:break;case 4:t.span.col=2;case 5:case 6:break;case 7:t.span.row=t.span.col=2;case 8:case 9:break;case 10:t.span.col=2}o.recipeTiles.push(t)})})}var o=this;t()}]),angular.module("spicyTaste").controller("MainController",["$location","$mdDialog","$http","SessionService","UserService","CONSTANTS",function(e,n,t,i,o,s){function r(e){var o=t.defaults.headers.common["X-Auth"];i.setLocal(s.LOCAL_STORAGE_KEY,o),n.hide(e)}function a(){c.showMobileMenu=!1,c.email="",c.password="",c.userName="";var e=i.getLocal(s.LOCAL_STORAGE_KEY);e&&(t.defaults.headers.common["X-Auth"]=e,o.get().then(function(e){c.currentUser=e}))}var c=this;a(),c.toggleMobileMenu=function(){c.showMobileMenu=!c.showMobileMenu},c.logout=function(){c.currentUser.loginType==s.FACEBOOK&&FB.logout(function(e){}),c.currentUser=null,o.logout()},c.showLoginDialog=function(e){n.show({clickOutsideToClose:!0,templateUrl:"ng/views/dialogs/login.html",targetEvent:e,controller:"MainController",controllerAs:"main"}).then(function(e){c.currentUser=e})},c.fbLogin=function(){FB.login(function(e){"connected"===e.status?FB.api("/me",function(e){var n={userName:e.name,email:e.email,password:s.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+e.id+"/picture?type=large",linkedSocial:s.FACEBOOK};o.socialLogin(n).then(function(e){e.loginType=s.FACEBOOK,r(e)})}):"not_authorized"===e.status},{scope:"public_profile,email"})},c.login=function(){o.login(c.email,c.password).then(function(e){e.loginType=s.EMAIL,r(e)})},c.signUp=function(){var e={userName:c.userName,email:c.email,password:c.password,photoUrl:"http://www.gravatar.com/avatar/"+md5.createHash(c.email),linkedSocial:s.EMAIL};o.create(e).then(function(e){e.loginType=s.EMAIL,r(e)})}}]),angular.module("spicyTaste").controller("ProfileController",["UserService",function(e){var n=this;n.user={},e.get().then(function(e){n.user=e})}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,n,t,i){i.$render=function(){n.html(i.$viewValue||"")},n.bind("blur",function(){e.$apply(function(){i.$setViewValue(n.html())})})}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,n){e.$watch("focusValue",function(e,t){e&&!t&&n[0].focus()})}}}),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.limit=function(n){return e.get("/api/dishes?limit="+n)},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n.addComment=function(n,t){return e.post("/api/dishes/"+n+"/comments",t)},n.getDifficulties=function(){return["初学","容易","一般","较难","专业"]},n}]),angular.module("spicyTaste").factory("SessionService",["$window",function(e){var n={};return n.getLocal=function(n){if(e.localStorage){var t=e.localStorage.getItem(n);return angular.fromJson(t)}return!1},n.setLocal=function(n,t){return e.localStorage&&e.localStorage.setItem(n,angular.toJson(t))},n}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","$window","CONSTANTS",function(e,n,t,i){var o={};return o.socialLogin=function(e){return console.log("socialUser: ",e),o.searchBy("email="+e.email).then(function(n){if(n.success){var t=n.users[0];return t.linkedSocial.indexOf(e.linkedSocial)<0?(t.linkedSocial.push(e.linkedSocial),t.userName=e.userName,t.photoUrl=e.photoUrl,o.update(t).then(function(){return o.login(t.email,i.SOCIAL_PASS)})):o.login(t.email,i.SOCIAL_PASS)}return o.create(e)})},o.login=function(n,t){return e.post("/api/auth",{email:n,password:t}).then(function(n){return e.defaults.headers.common["X-Auth"]=n.data,o.get()})},o.logout=function(){delete e.defaults.headers.common["X-Auth"],t.localStorage.removeItem(i.LOCAL_STORAGE_KEY)},o.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},o.searchBy=function(n){return e.get("/api/users?"+n).then(function(e){return e.data})},o.getById=function(n){return e.get("/api/users/"+n).then(function(e){return e.data})},o.create=function(n){return e.post("/api/users/",n).then(function(){return o.login(n.email,n.password)})},o.update=function(n,t){return e.put("/api/users/"+n,t).then(function(e){return e.data})},o.collect=function(t){return e.put("/api/users/"+n.user._id+"/dishes/"+t).then(function(e){return e.data})},o}]);
//# sourceMappingURL=data:application/json;base64,