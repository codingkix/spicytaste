angular.module("spicyTaste",["ngRoute","angular-md5","ngMaterial","ngAnimate","ngMessages"]).constant("CONSTANTS",{FB_APP_ID:0x58e0e66b31adc,FACEBOOK:"FB",EMAIL:"EMAIL",SOCIAL_PASS:"PASSWORD"}),angular.module("spicyTaste").config(["$mdThemingProvider","$mdIconProvider",function(e,n){var t=e.extendPalette("deep-orange",{500:"f27242"});e.definePalette("primaryOrange",t),e.theme("default").primaryPalette("primaryOrange").accentPalette("light-green"),n.icon("menu","assets/svg/ic_menu_24px.svg").icon("share","assets/svg/ic_share_24px.svg").icon("login","assets/svg/ic_account_circle_24px.svg").icon("recipes","assets/svg/ic_event_note_48px.svg").icon("restaurants","assets/svg/ic_restaurant_menu_48px.svg")}]),angular.module("spicyTaste").run(["$rootScope","$window","UserService","CONSTANTS",function(e,n,t,o){e.user=null,n.fbAsyncInit=function(){FB.init({appId:o.FB_APP_ID,cookie:!0,xfbml:!0,version:"v2.2"})},function(e,n,t){var o,i=e.getElementsByTagName(n)[0];e.getElementById(t)||(o=e.createElement(n),o.id=t,o.src="//connect.facebook.net/en_US/sdk.js",i.parentNode.insertBefore(o,i))}(document,"script","facebook-jssdk")}]),angular.module("spicyTaste").config(["$locationProvider","$routeProvider",function(e,n){e.html5Mode(!0),n.when("/",{templateUrl:"ng/views/pages/home.html",controller:"HomeController",controllerAs:"home"}).when("/dishes",{templateUrl:"ng/views/pages/dish/all.html",controller:"DishListController",controllerAs:"dishList"}).when("/dishes/:dish_id",{templateUrl:"ng/views/pages/dish/detail.html",controller:"DishDetailController",controllerAs:"detail"}).when("/admin/dishes/list",{templateUrl:"ng/views/pages/admin/dish/list.html",controller:"DishListController",controllerAs:"dishList"}).when("/admin/dishes/create",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishCreateController",controllerAs:"dishManage"}).when("/admin/dishes/:dish_id",{templateUrl:"ng/views/pages/admin/dish/single.html",controller:"DishEditController",controllerAs:"dishManage"}).when("/login",{templateUrl:"ng/views/pages/user/login.html",controller:"LoginController",controllerAs:"login"}).when("/me",{templateUrl:"ng/views/pages/user/me.html",controller:"ProfileController",controllerAs:"me"})}]),angular.module("spicyTaste").controller("DishListController",["DishService","SocialService","$location",function(e,n,t){var o=this;o.processing=!0,e.all().success(function(e){o.processing=!1,o.dishes=e}),o.deleteDish=function(n){o.processing=!0,e["delete"](n).success(function(n){e.all().success(function(e){o.processing=!1,o.dishes=e})})},o.addDish=function(){o.processing=!0,e.create({name:"new dish"}).success(function(e){t.path("/admin/dish/"+e.dish._id)})},o.fbShare=function(e){var o=t.absUrl()+"/"+e._id;n.fbShare(o)}}]).controller("DishDetailController",["$scope","$location","$rootScope","$routeParams","DishService","UserService",function(e,n,t,o,i,s){function r(){e.focusOnComment=!1,l.newComment={content:"",replyTo:null},l.commentTitle="Comment"}var l=this;l.dish={},r(),i.get(o.dish_id).success(function(e){l.dish=e,l.dish.isCollected=t.user&&t.user.favouriteDishes.indexOf(l.dish._id)>=0?!0:!1}),l.addComment=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}i.addComment(l.dish._id,l.newComment).success(function(e){l.dish.comments.push(e)}),r()},l.reply=function(n){l.newComment.replyTo=n._id,l.commentTitle="@"+n.userName,e.focusOnComment=!0},l.collect=function(){if(!t.user){var e=n.url();return n.path("/login").search({returnUrl:e})}s.collect(l.dish._id).then(function(e){console.log("UserService.collect:",e),e.success&&(l.dish.isCollected=!0)})}}]).controller("DishCreateController",["$location","DishService",function(e,n){var t=this;t.dish={name:"new dish"},t.save=function(){t.processing=!0,n.create(t.dish).success(function(n){e.path("/admin/dish/"+n.dish._id)})}}]).controller("DishEditController",["$routeParams","DishService","$location",function(e,n,t){function o(){i.newPhoto="",i.newInstruction="",i.message="",i.processing=!1}var i=this;o(),n.get(e.dish_id).success(function(e){i.dish=e}),i.addInstruction=function(){i.dish.instructions.push(i.newInstruction),i.newInstruction=""},i.removeInstruction=function(e){i.dish.instructions.splice(e,1)},i.addPhoto=function(){console.log("newPhoto: ",i.newPhoto),i.dish.photos.push(i.newPhoto),console.log("dish:",i.dish),i.newPhoto=""},i.removePhoto=function(e){i.dish.photos.splice(e,1)},i.save=function(){i.processing=!0,n.update(e.dish_id,i.dish).success(function(e){o(),i.message=e.message})}}]),angular.module("spicyTaste").controller("HomeController",function(){}),angular.module("spicyTaste").controller("LoginController",["$scope","UserService","$location","CONSTANTS","md5",function(e,n,t,o,i){var s=this;s.email="",s.password="",s.userName="",s.showSignUpForm=!1,s.fbLogin=function(){FB.login(function(t){"connected"===t.status?FB.api("/me",function(t){console.log("fb user: ",t);var i={userName:t.name,email:t.email,password:o.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+t.id+"/picture?type=large",linkedSocial:o.FACEBOOK};n.socialLogin(i).then(function(n){n.loginType=o.FACEBOOK,e.$emit("login",n)})}):"not_authorized"===t.status},{scope:"public_profile,email"})},s.login=function(){n.login(s.email,s.password).then(function(n){n.loginType=o.EMAIL,e.$emit("login",n)})},s.signUp=function(){var t={userName:s.userName,email:s.email,password:s.password,photoUrl:"http://www.gravatar.com/avatar/"+i.createHash(s.email),linkedSocial:o.EMAIL};n.create(t).then(function(n){e.$emit("login",n)})}}]),angular.module("spicyTaste").controller("MainController",["$scope","$rootScope","$location","$mdDialog","UserService","CONSTANTS",function(e,n,t,o,i,s){function r(){var n=this;n.email="",n.password="",n.userName="",n.showSignUpForm=!1,n.fbLogin=function(){FB.login(function(n){"connected"===n.status?FB.api("/me",function(n){console.log("fb user: ",n);var t={userName:n.name,email:n.email,password:s.SOCIAL_PASS,photoUrl:"http://graph.facebook.com/"+n.id+"/picture?type=large",linkedSocial:s.FACEBOOK};i.socialLogin(t).then(function(n){n.loginType=s.FACEBOOK,e.$emit("login",n)})}):"not_authorized"===n.status},{scope:"public_profile,email"})},n.login=function(){i.login(n.email,n.password).then(function(n){n.loginType=s.EMAIL,e.$emit("login",n)})},n.signUp=function(){var t={userName:n.userName,email:n.email,password:n.password,photoUrl:"http://www.gravatar.com/avatar/"+md5.createHash(n.email),linkedSocial:s.EMAIL};i.create(t).then(function(n){e.$emit("login",n)})}}var l=this;l.showMobileMenu=!1,l.toggleMobileMenu=function(){l.showMobileMenu=!l.showMobileMenu},e.$on("login",function(e,o){n.user=l.currentUser=o;var i=t.search().returnUrl;i?(console.log("return url: ",i),t.path(i).search({returnUrl:null})):t.path("/")}),l.logout=function(){l.currentUser.loginType==s.FACEBOOK&&FB.logout(function(e){}),l.currentUser=null,n.user=null,i.logout()},l.showLoginDialog=function(n){o.show({clickOutsideToClose:!0,controller:r,templateUrl:"ng/views/dialogs/login.html",targetEvent:n,controllerAs:"login"}).then(function(n){e.alert='You said the information was "'+n+'".'},function(){e.alert="You cancelled the dialog."})}}]),angular.module("spicyTaste").controller("ProfileController",["UserService",function(e){var n=this;n.user={},e.get().then(function(e){n.user=e})}]),angular.module("spicyTaste").directive("contenteditable",function(){return{require:"ngModel",restrict:"A",link:function(e,n,t,o){o.$render=function(){n.html(o.$viewValue||"")},n.bind("blur",function(){e.$apply(function(){o.$setViewValue(n.html())})})}}}),angular.module("spicyTaste").directive("focusOn",function(){return{restrict:"A",scope:{focusValue:"=focusOn"},link:function(e,n){e.$watch("focusValue",function(e,t){e&&!t&&n[0].focus()})}}}),angular.module("spicyTaste").factory("DishService",["$http",function(e){var n={};return n.all=function(){return e.get("/api/dishes")},n.create=function(n){return e.post("/api/dishes",n)},n.get=function(n){return e.get("/api/dishes/"+n)},n.update=function(n,t){return e.put("/api/dishes/"+n,t)},n["delete"]=function(n){return e["delete"]("/api/dishes/"+n)},n.addComment=function(n,t){return e.post("/api/dishes/"+n+"/comments",t)},n}]),angular.module("spicyTaste").factory("SocialService",function(){var e={};return e.fbShare=function(e){FB.ui({method:"share",href:e},function(e){})},e}),angular.module("spicyTaste").factory("UserService",["$http","$rootScope","CONSTANTS",function(e,n,t){var o={};return o.socialLogin=function(e){return console.log("socialUser: ",e),o.searchBy("email="+e.email).then(function(n){if(n.success){var i=n.users[0];return i.linkedSocial.indexOf(e.linkedSocial)<0?(i.linkedSocial.push(e.linkedSocial),i.userName=e.userName,i.photoUrl=e.photoUrl,o.update(i).then(function(){return o.login(i.email,t.SOCIAL_PASS)})):o.login(i.email,t.SOCIAL_PASS)}return o.create(e)})},o.login=function(n,t){return e.post("/api/auth",{email:n,password:t}).then(function(n){return e.defaults.headers.common["X-Auth"]=n.data,o.get()})},o.logout=function(){delete e.defaults.headers.common["X-Auth"]},o.get=function(){return e.get("/api/users/me").then(function(e){return e.data})},o.searchBy=function(n){return e.get("/api/users?"+n).then(function(e){return e.data})},o.getById=function(n){return e.get("/api/users/"+n).then(function(e){return e.data})},o.create=function(n){return e.post("/api/users/",n).then(function(){return o.login(n.email,n.password)})},o.update=function(n,t){return e.put("/api/users/"+n,t).then(function(e){return e.data})},o.collect=function(t){return e.put("/api/users/"+n.user._id+"/dishes/"+t).then(function(e){return e.data})},o}]);
//# sourceMappingURL=data:application/json;base64,